// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: instance_config.proto

package instance_config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InstanceConfigService_ListConfigs_FullMethodName  = "/InternalApi.InstanceConfig.InstanceConfigService/ListConfigs"
	InstanceConfigService_ModifyConfig_FullMethodName = "/InternalApi.InstanceConfig.InstanceConfigService/ModifyConfig"
)

// InstanceConfigServiceClient is the client API for InstanceConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// InstanceConfig service API specification.
type InstanceConfigServiceClient interface {
	ListConfigs(ctx context.Context, in *ListConfigsRequest, opts ...grpc.CallOption) (*ListConfigsResponse, error)
	ModifyConfig(ctx context.Context, in *ModifyConfigRequest, opts ...grpc.CallOption) (*ModifyConfigResponse, error)
}

type instanceConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceConfigServiceClient(cc grpc.ClientConnInterface) InstanceConfigServiceClient {
	return &instanceConfigServiceClient{cc}
}

func (c *instanceConfigServiceClient) ListConfigs(ctx context.Context, in *ListConfigsRequest, opts ...grpc.CallOption) (*ListConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConfigsResponse)
	err := c.cc.Invoke(ctx, InstanceConfigService_ListConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceConfigServiceClient) ModifyConfig(ctx context.Context, in *ModifyConfigRequest, opts ...grpc.CallOption) (*ModifyConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyConfigResponse)
	err := c.cc.Invoke(ctx, InstanceConfigService_ModifyConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstanceConfigServiceServer is the server API for InstanceConfigService service.
// All implementations should embed UnimplementedInstanceConfigServiceServer
// for forward compatibility.
//
// InstanceConfig service API specification.
type InstanceConfigServiceServer interface {
	ListConfigs(context.Context, *ListConfigsRequest) (*ListConfigsResponse, error)
	ModifyConfig(context.Context, *ModifyConfigRequest) (*ModifyConfigResponse, error)
}

// UnimplementedInstanceConfigServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInstanceConfigServiceServer struct{}

func (UnimplementedInstanceConfigServiceServer) ListConfigs(context.Context, *ListConfigsRequest) (*ListConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigs not implemented")
}
func (UnimplementedInstanceConfigServiceServer) ModifyConfig(context.Context, *ModifyConfigRequest) (*ModifyConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyConfig not implemented")
}
func (UnimplementedInstanceConfigServiceServer) testEmbeddedByValue() {}

// UnsafeInstanceConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceConfigServiceServer will
// result in compilation errors.
type UnsafeInstanceConfigServiceServer interface {
	mustEmbedUnimplementedInstanceConfigServiceServer()
}

func RegisterInstanceConfigServiceServer(s grpc.ServiceRegistrar, srv InstanceConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedInstanceConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InstanceConfigService_ServiceDesc, srv)
}

func _InstanceConfigService_ListConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceConfigServiceServer).ListConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceConfigService_ListConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceConfigServiceServer).ListConfigs(ctx, req.(*ListConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceConfigService_ModifyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceConfigServiceServer).ModifyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceConfigService_ModifyConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceConfigServiceServer).ModifyConfig(ctx, req.(*ModifyConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstanceConfigService_ServiceDesc is the grpc.ServiceDesc for InstanceConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.InstanceConfig.InstanceConfigService",
	HandlerType: (*InstanceConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConfigs",
			Handler:    _InstanceConfigService_ListConfigs_Handler,
		},
		{
			MethodName: "ModifyConfig",
			Handler:    _InstanceConfigService_ModifyConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "instance_config.proto",
}
