# This is a Semaphore configuration file for Python projects
# For more information about Semaphore configuration visit:
# https://docs.semaphoreci.com/reference/pipeline-yaml-reference/

version: v1.0  # Semaphore configuration version
name: "🐍 Python CI Pipeline"  # Pipeline display name

agent:
  machine:
    type: {{ machine_type }}  # Define the machine type (e.g., e1-standard-2)
    os_image: {{ os_image }}  # Specify the OS image (e.g., ubuntu2004)

fail_fast:
  stop:
    when: branch != 'main'  # Stop execution early for non-main branches
auto_cancel:
  running:
    when: branch != 'main'  # Cancel running pipelines on non-main branches
  queued:
    when: branch = 'main'   # Cancel queued pipelines on the main branch

global_job_config:
  prologue:
    commands:
      - checkout  # Fetch the latest code from the repository
      - sem-service start postgres 17  # Start PostgreSQL service for database operations
      - sem-service start redis 7  # Start Redis service for caching and session management
      - sem-version python 3.12  # Use Python 3.12
      - cache restore  # Restore cached dependencies to save time
      - python -m pip install --upgrade pip  # Ensure the latest version of pip is used
      - pip install poetry  # Install Poetry, a modern dependency manager
      - poetry config virtualenvs.create false  # Use the system-wide environment instead of virtualenvs
      - poetry install --no-interaction  # Install all project dependencies

blocks:
  - name: "🛠️ Setup and Cache"
    dependencies: []
    task:
      jobs:
        - name: "📦 Install Dependencies"
          commands:
            - cache store  # Save the current state of dependencies for future runs

  - name: "🔍 Code Quality"
    dependencies: ["🛠️ Setup and Cache"]
    task:
      jobs:
        - name: "✨ Lint and Format"
          commands:
            - black --check .  # Ensure code follows the Black formatting style
            - isort --check-only .  # Verify that imports are correctly sorted
            - flake8 .  # Check code against Python style guidelines
            - mypy .  # Perform type checks on Python code

  - name: "🔐 Security Checks"
    dependencies: ["🛠️ Setup and Cache"]
    task:
      jobs:
        - name: "🛡️ Security Scan"
          commands:
            - bandit -r .  # Analyze code for security vulnerabilities
            - safety check  # Check for vulnerabilities in Python dependencies

  - name: "🧪 Test Suite"
    dependencies: ["🛠️ Setup and Cache"]
    task:
      env_vars:
        - name: PYTHONPATH
          value: .  # Set the root directory as part of the Python path
        - name: DJANGO_SETTINGS_MODULE
          value: config.settings.test  # Specify test settings for Django projects
        - name: DATABASE_URL
          value: postgresql://postgres@localhost:5432/test_db  # PostgreSQL connection string
      jobs:
        - name: "🟢 Pytest"
          parallelism: 4  # Run tests across 4 parallel jobs for efficiency
          commands:
            - pytest --cov=. --cov-report=xml -n auto --junitxml=report.xml  # Run tests with coverage
            - coverage report  # Print the coverage report
      epilogue:
        always:
          commands:
            - '[[ -f report.xml ]] && test-results publish report.xml'  # Publish test results if they exist

after_pipeline:
  task:
    jobs:
      - name: "Merge Reports 📊"
        commands:
          - test-results gen-pipeline-report  # Generate a summary report of all test results
