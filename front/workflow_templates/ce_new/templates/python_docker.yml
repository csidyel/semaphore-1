# This is a Semaphore configuration file for Python projects using Docker
# For more information about Semaphore configuration visit:
# https://docs.semaphoreci.com/reference/pipeline-yaml-reference/

version: v1.0  # Semaphore configuration version
name: "🐍 Python CI Pipeline"  # Pipeline display name

# Define the machine type, OS image, and containers
agent:
  machine:
    type: {{ machine_type }}
    os_image: {{ os_image }}

  containers:
    - name: main
      image: 'registry.semaphoreci.com/python:3.12'  # Python 3.12 container
    - name: postgres
      image: registry.semaphoreci.com/postgres:17  # PostgreSQL 17 for database operations
    - name: redis
      image: registry.semaphoreci.com/redis:7.0  # Redis 7.0 for caching

# Configure when to stop the pipeline early
fail_fast:
  stop:
    when: branch != 'main'  # Stop all blocks if a job fails on non-main branches
auto_cancel:
  running:
    when: branch != 'main'  # Cancel running pipelines on non-main branches
  queued:
    when: branch = 'main'   # Cancel queued pipelines on main branch

# Commands to run before each job
global_job_config:
  prologue:
    commands:
      - checkout                    # Get the code from repository
      - cache restore             # Restore cached dependencies      
      - python -m pip install --upgrade pip  # Upgrade pip
      - pip install poetry         # Install Poetry
      - poetry config virtualenvs.create false  # Configure Poetry
      - poetry install --no-interaction  # Install dependencies

# Pipeline blocks represent groups of jobs that can run in parallel
blocks:
  - name: "🛠️ Setup and Cache"
    dependencies: []
    task:
      jobs:
        - name: "📦 Install Dependencies"
          commands:
            - cache store  # Save the current state of dependencies for future runs

  - name: "🔍 Code Quality"
    dependencies: ["🛠️ Setup and Cache"]
    task:
      jobs:
        - name: "✨ Lint and Format"
          commands:
            - black --check .  # Ensure code follows the Black formatting style
            - isort --check-only .  # Verify that imports are correctly sorted
            - flake8 .  # Check code against Python style guidelines
            - mypy .  # Perform type checks on Python code

  - name: "🔐 Security Checks"
    dependencies: ["🛠️ Setup and Cache"]
    task:
      jobs:
        - name: "🛡️ Security Scan"
          commands:
            - bandit -r .  # Analyze code for security vulnerabilities
            - safety check  # Check for vulnerabilities in Python dependencies

  - name: "🧪 Test Suite"
    dependencies: ["🛠️ Setup and Cache"]
    task:
      env_vars:
        - name: PYTHONPATH
          value: .  # Set the root directory as part of the Python path
        - name: DJANGO_SETTINGS_MODULE
          value: config.settings.test  # Specify test settings for Django projects
        - name: DATABASE_URL
          value: postgresql://postgres@localhost:5432/test_db  # PostgreSQL connection string
      jobs:
        - name: "🟢 Pytest"
          parallelism: 4  # Run tests across 4 parallel jobs for efficiency
          commands:
            - pytest --cov=. --cov-report=xml -n auto --junitxml=report.xml  # Run tests with coverage
            - coverage report  # Print the coverage report
      epilogue:
        always:
          commands:
            - '[[ -f report.xml ]] && test-results publish report.xml'  # Publish test results if they exist

after_pipeline:
  task:
    jobs:
      - name: "Merge Reports 📊"
        commands:
          - test-results gen-pipeline-report  # Generate a summary report of all test results
