// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.0
// source: repository.proto

package repository

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RepositoryService_Describe_FullMethodName                   = "/InternalApi.Repository.RepositoryService/Describe"
	RepositoryService_DescribeMany_FullMethodName               = "/InternalApi.Repository.RepositoryService/DescribeMany"
	RepositoryService_List_FullMethodName                       = "/InternalApi.Repository.RepositoryService/List"
	RepositoryService_Create_FullMethodName                     = "/InternalApi.Repository.RepositoryService/Create"
	RepositoryService_Update_FullMethodName                     = "/InternalApi.Repository.RepositoryService/Update"
	RepositoryService_Delete_FullMethodName                     = "/InternalApi.Repository.RepositoryService/Delete"
	RepositoryService_GetFile_FullMethodName                    = "/InternalApi.Repository.RepositoryService/GetFile"
	RepositoryService_GetFiles_FullMethodName                   = "/InternalApi.Repository.RepositoryService/GetFiles"
	RepositoryService_GetChangedFilePaths_FullMethodName        = "/InternalApi.Repository.RepositoryService/GetChangedFilePaths"
	RepositoryService_Commit_FullMethodName                     = "/InternalApi.Repository.RepositoryService/Commit"
	RepositoryService_GetSshKey_FullMethodName                  = "/InternalApi.Repository.RepositoryService/GetSshKey"
	RepositoryService_ListAccessibleRepositories_FullMethodName = "/InternalApi.Repository.RepositoryService/ListAccessibleRepositories"
	RepositoryService_ListCollaborators_FullMethodName          = "/InternalApi.Repository.RepositoryService/ListCollaborators"
	RepositoryService_CreateBuildStatus_FullMethodName          = "/InternalApi.Repository.RepositoryService/CreateBuildStatus"
	RepositoryService_CheckDeployKey_FullMethodName             = "/InternalApi.Repository.RepositoryService/CheckDeployKey"
	RepositoryService_RegenerateDeployKey_FullMethodName        = "/InternalApi.Repository.RepositoryService/RegenerateDeployKey"
	RepositoryService_CheckWebhook_FullMethodName               = "/InternalApi.Repository.RepositoryService/CheckWebhook"
	RepositoryService_RegenerateWebhook_FullMethodName          = "/InternalApi.Repository.RepositoryService/RegenerateWebhook"
	RepositoryService_Fork_FullMethodName                       = "/InternalApi.Repository.RepositoryService/Fork"
	RepositoryService_DescribeRemoteRepository_FullMethodName   = "/InternalApi.Repository.RepositoryService/DescribeRemoteRepository"
	RepositoryService_DescribeRevision_FullMethodName           = "/InternalApi.Repository.RepositoryService/DescribeRevision"
	RepositoryService_VerifyWebhookSignature_FullMethodName     = "/InternalApi.Repository.RepositoryService/VerifyWebhookSignature"
)

// RepositoryServiceClient is the client API for RepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositoryServiceClient interface {
	// Operation is called to get details about repository.
	// Operation is synchronous.
	// Returns GRPC error in case the repository isn't found.
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
	// Operation is called to get details about repositories.
	// Operation is synchronous.
	// Returns GRPC error in case repositories can't be returned.
	DescribeMany(ctx context.Context, in *DescribeManyRequest, opts ...grpc.CallOption) (*DescribeManyResponse, error)
	// @deprecated Use DescribeMany instead.
	// Operation is called to get list of repositories for given projects.
	// Operation is synchronous.
	// Returns GRPC error in case list can't be returned.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Operation is called to create new repository.
	// Operation is synchronous.
	// Returns GRPC error in case repository can't be created.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Operation is called to update a repository.
	// When repository url changes - in addition to regular update operation -
	// deploy key and webhook are regenerated.
	//
	// Operation is synchronous.
	// Returns GRPC error in case repository can't be updated.
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Operation is called to delete repository.
	// Operation is synchronous.
	// Returns GRPC error in case repository can't be deleted.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Operation is called to get file from Repository.
	// Operation is synchronous.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	// Operation is called to get files from Repository.
	// Operation is synchronous.
	GetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (*GetFilesResponse, error)
	// Operation is called to get changes for a commit range.
	// Operation is synchronous.
	GetChangedFilePaths(ctx context.Context, in *GetChangedFilePathsRequest, opts ...grpc.CallOption) (*GetChangedFilePathsResponse, error)
	// Operation is called to commit to the repo.
	// Operation is synchronous.
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	// Operation is called to get SSH key from Repository.
	// Operation is synchronous.
	GetSshKey(ctx context.Context, in *GetSshKeyRequest, opts ...grpc.CallOption) (*GetSshKeyResponse, error)
	// Returns a list of repositories that is accessible for a given user on a given integration.
	ListAccessibleRepositories(ctx context.Context, in *ListAccessibleRepositoriesRequest, opts ...grpc.CallOption) (*ListAccessibleRepositoriesResponse, error)
	// Returns a list of collaborators, with permission level, for requested repository.
	ListCollaborators(ctx context.Context, in *ListCollaboratorsRequest, opts ...grpc.CallOption) (*ListCollaboratorsResponse, error)
	// Returns a list of collaborators, with permission level, for requested repository.
	CreateBuildStatus(ctx context.Context, in *CreateBuildStatusRequest, opts ...grpc.CallOption) (*CreateBuildStatusResponse, error)
	// Fetches a repository's deploy key from a git platform
	CheckDeployKey(ctx context.Context, in *CheckDeployKeyRequest, opts ...grpc.CallOption) (*CheckDeployKeyResponse, error)
	// Regenerates a deploy key for a repository.
	RegenerateDeployKey(ctx context.Context, in *RegenerateDeployKeyRequest, opts ...grpc.CallOption) (*RegenerateDeployKeyResponse, error)
	// Checks a git webhook for a repository.
	// If the webhook is not found or is invalid, it will return an error.
	CheckWebhook(ctx context.Context, in *CheckWebhookRequest, opts ...grpc.CallOption) (*CheckWebhookResponse, error)
	// Regenerate a git webhook for a repository
	RegenerateWebhook(ctx context.Context, in *RegenerateWebhookRequest, opts ...grpc.CallOption) (*RegenerateWebhookResponse, error)
	// Forks and creates a repository based on the source repository.
	Fork(ctx context.Context, in *ForkRequest, opts ...grpc.CallOption) (*ForkResponse, error)
	// Fetches information about remote repository.
	DescribeRemoteRepository(ctx context.Context, in *DescribeRemoteRepositoryRequest, opts ...grpc.CallOption) (*DescribeRemoteRepositoryResponse, error)
	// Fetches information about revision.
	DescribeRevision(ctx context.Context, in *DescribeRevisionRequest, opts ...grpc.CallOption) (*DescribeRevisionResponse, error)
	// Verifies if incoming webhook is correctly signed.
	VerifyWebhookSignature(ctx context.Context, in *VerifyWebhookSignatureRequest, opts ...grpc.CallOption) (*VerifyWebhookSignatureResponse, error)
}

type repositoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryServiceClient(cc grpc.ClientConnInterface) RepositoryServiceClient {
	return &repositoryServiceClient{cc}
}

func (c *repositoryServiceClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeResponse)
	err := c.cc.Invoke(ctx, RepositoryService_Describe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) DescribeMany(ctx context.Context, in *DescribeManyRequest, opts ...grpc.CallOption) (*DescribeManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeManyResponse)
	err := c.cc.Invoke(ctx, RepositoryService_DescribeMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, RepositoryService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, RepositoryService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, RepositoryService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, RepositoryService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, RepositoryService_GetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (*GetFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilesResponse)
	err := c.cc.Invoke(ctx, RepositoryService_GetFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetChangedFilePaths(ctx context.Context, in *GetChangedFilePathsRequest, opts ...grpc.CallOption) (*GetChangedFilePathsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChangedFilePathsResponse)
	err := c.cc.Invoke(ctx, RepositoryService_GetChangedFilePaths_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, RepositoryService_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetSshKey(ctx context.Context, in *GetSshKeyRequest, opts ...grpc.CallOption) (*GetSshKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSshKeyResponse)
	err := c.cc.Invoke(ctx, RepositoryService_GetSshKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) ListAccessibleRepositories(ctx context.Context, in *ListAccessibleRepositoriesRequest, opts ...grpc.CallOption) (*ListAccessibleRepositoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessibleRepositoriesResponse)
	err := c.cc.Invoke(ctx, RepositoryService_ListAccessibleRepositories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) ListCollaborators(ctx context.Context, in *ListCollaboratorsRequest, opts ...grpc.CallOption) (*ListCollaboratorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCollaboratorsResponse)
	err := c.cc.Invoke(ctx, RepositoryService_ListCollaborators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) CreateBuildStatus(ctx context.Context, in *CreateBuildStatusRequest, opts ...grpc.CallOption) (*CreateBuildStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBuildStatusResponse)
	err := c.cc.Invoke(ctx, RepositoryService_CreateBuildStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) CheckDeployKey(ctx context.Context, in *CheckDeployKeyRequest, opts ...grpc.CallOption) (*CheckDeployKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckDeployKeyResponse)
	err := c.cc.Invoke(ctx, RepositoryService_CheckDeployKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) RegenerateDeployKey(ctx context.Context, in *RegenerateDeployKeyRequest, opts ...grpc.CallOption) (*RegenerateDeployKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegenerateDeployKeyResponse)
	err := c.cc.Invoke(ctx, RepositoryService_RegenerateDeployKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) CheckWebhook(ctx context.Context, in *CheckWebhookRequest, opts ...grpc.CallOption) (*CheckWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckWebhookResponse)
	err := c.cc.Invoke(ctx, RepositoryService_CheckWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) RegenerateWebhook(ctx context.Context, in *RegenerateWebhookRequest, opts ...grpc.CallOption) (*RegenerateWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegenerateWebhookResponse)
	err := c.cc.Invoke(ctx, RepositoryService_RegenerateWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) Fork(ctx context.Context, in *ForkRequest, opts ...grpc.CallOption) (*ForkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForkResponse)
	err := c.cc.Invoke(ctx, RepositoryService_Fork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) DescribeRemoteRepository(ctx context.Context, in *DescribeRemoteRepositoryRequest, opts ...grpc.CallOption) (*DescribeRemoteRepositoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeRemoteRepositoryResponse)
	err := c.cc.Invoke(ctx, RepositoryService_DescribeRemoteRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) DescribeRevision(ctx context.Context, in *DescribeRevisionRequest, opts ...grpc.CallOption) (*DescribeRevisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeRevisionResponse)
	err := c.cc.Invoke(ctx, RepositoryService_DescribeRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) VerifyWebhookSignature(ctx context.Context, in *VerifyWebhookSignatureRequest, opts ...grpc.CallOption) (*VerifyWebhookSignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyWebhookSignatureResponse)
	err := c.cc.Invoke(ctx, RepositoryService_VerifyWebhookSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServiceServer is the server API for RepositoryService service.
// All implementations should embed UnimplementedRepositoryServiceServer
// for forward compatibility.
type RepositoryServiceServer interface {
	// Operation is called to get details about repository.
	// Operation is synchronous.
	// Returns GRPC error in case the repository isn't found.
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
	// Operation is called to get details about repositories.
	// Operation is synchronous.
	// Returns GRPC error in case repositories can't be returned.
	DescribeMany(context.Context, *DescribeManyRequest) (*DescribeManyResponse, error)
	// @deprecated Use DescribeMany instead.
	// Operation is called to get list of repositories for given projects.
	// Operation is synchronous.
	// Returns GRPC error in case list can't be returned.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Operation is called to create new repository.
	// Operation is synchronous.
	// Returns GRPC error in case repository can't be created.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Operation is called to update a repository.
	// When repository url changes - in addition to regular update operation -
	// deploy key and webhook are regenerated.
	//
	// Operation is synchronous.
	// Returns GRPC error in case repository can't be updated.
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Operation is called to delete repository.
	// Operation is synchronous.
	// Returns GRPC error in case repository can't be deleted.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Operation is called to get file from Repository.
	// Operation is synchronous.
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	// Operation is called to get files from Repository.
	// Operation is synchronous.
	GetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error)
	// Operation is called to get changes for a commit range.
	// Operation is synchronous.
	GetChangedFilePaths(context.Context, *GetChangedFilePathsRequest) (*GetChangedFilePathsResponse, error)
	// Operation is called to commit to the repo.
	// Operation is synchronous.
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	// Operation is called to get SSH key from Repository.
	// Operation is synchronous.
	GetSshKey(context.Context, *GetSshKeyRequest) (*GetSshKeyResponse, error)
	// Returns a list of repositories that is accessible for a given user on a given integration.
	ListAccessibleRepositories(context.Context, *ListAccessibleRepositoriesRequest) (*ListAccessibleRepositoriesResponse, error)
	// Returns a list of collaborators, with permission level, for requested repository.
	ListCollaborators(context.Context, *ListCollaboratorsRequest) (*ListCollaboratorsResponse, error)
	// Returns a list of collaborators, with permission level, for requested repository.
	CreateBuildStatus(context.Context, *CreateBuildStatusRequest) (*CreateBuildStatusResponse, error)
	// Fetches a repository's deploy key from a git platform
	CheckDeployKey(context.Context, *CheckDeployKeyRequest) (*CheckDeployKeyResponse, error)
	// Regenerates a deploy key for a repository.
	RegenerateDeployKey(context.Context, *RegenerateDeployKeyRequest) (*RegenerateDeployKeyResponse, error)
	// Checks a git webhook for a repository.
	// If the webhook is not found or is invalid, it will return an error.
	CheckWebhook(context.Context, *CheckWebhookRequest) (*CheckWebhookResponse, error)
	// Regenerate a git webhook for a repository
	RegenerateWebhook(context.Context, *RegenerateWebhookRequest) (*RegenerateWebhookResponse, error)
	// Forks and creates a repository based on the source repository.
	Fork(context.Context, *ForkRequest) (*ForkResponse, error)
	// Fetches information about remote repository.
	DescribeRemoteRepository(context.Context, *DescribeRemoteRepositoryRequest) (*DescribeRemoteRepositoryResponse, error)
	// Fetches information about revision.
	DescribeRevision(context.Context, *DescribeRevisionRequest) (*DescribeRevisionResponse, error)
	// Verifies if incoming webhook is correctly signed.
	VerifyWebhookSignature(context.Context, *VerifyWebhookSignatureRequest) (*VerifyWebhookSignatureResponse, error)
}

// UnimplementedRepositoryServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRepositoryServiceServer struct{}

func (UnimplementedRepositoryServiceServer) Describe(context.Context, *DescribeRequest) (*DescribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedRepositoryServiceServer) DescribeMany(context.Context, *DescribeManyRequest) (*DescribeManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMany not implemented")
}
func (UnimplementedRepositoryServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRepositoryServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRepositoryServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRepositoryServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRepositoryServiceServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedRepositoryServiceServer) GetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedRepositoryServiceServer) GetChangedFilePaths(context.Context, *GetChangedFilePathsRequest) (*GetChangedFilePathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangedFilePaths not implemented")
}
func (UnimplementedRepositoryServiceServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedRepositoryServiceServer) GetSshKey(context.Context, *GetSshKeyRequest) (*GetSshKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSshKey not implemented")
}
func (UnimplementedRepositoryServiceServer) ListAccessibleRepositories(context.Context, *ListAccessibleRepositoriesRequest) (*ListAccessibleRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessibleRepositories not implemented")
}
func (UnimplementedRepositoryServiceServer) ListCollaborators(context.Context, *ListCollaboratorsRequest) (*ListCollaboratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollaborators not implemented")
}
func (UnimplementedRepositoryServiceServer) CreateBuildStatus(context.Context, *CreateBuildStatusRequest) (*CreateBuildStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuildStatus not implemented")
}
func (UnimplementedRepositoryServiceServer) CheckDeployKey(context.Context, *CheckDeployKeyRequest) (*CheckDeployKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeployKey not implemented")
}
func (UnimplementedRepositoryServiceServer) RegenerateDeployKey(context.Context, *RegenerateDeployKeyRequest) (*RegenerateDeployKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateDeployKey not implemented")
}
func (UnimplementedRepositoryServiceServer) CheckWebhook(context.Context, *CheckWebhookRequest) (*CheckWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckWebhook not implemented")
}
func (UnimplementedRepositoryServiceServer) RegenerateWebhook(context.Context, *RegenerateWebhookRequest) (*RegenerateWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateWebhook not implemented")
}
func (UnimplementedRepositoryServiceServer) Fork(context.Context, *ForkRequest) (*ForkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fork not implemented")
}
func (UnimplementedRepositoryServiceServer) DescribeRemoteRepository(context.Context, *DescribeRemoteRepositoryRequest) (*DescribeRemoteRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRemoteRepository not implemented")
}
func (UnimplementedRepositoryServiceServer) DescribeRevision(context.Context, *DescribeRevisionRequest) (*DescribeRevisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRevision not implemented")
}
func (UnimplementedRepositoryServiceServer) VerifyWebhookSignature(context.Context, *VerifyWebhookSignatureRequest) (*VerifyWebhookSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyWebhookSignature not implemented")
}
func (UnimplementedRepositoryServiceServer) testEmbeddedByValue() {}

// UnsafeRepositoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositoryServiceServer will
// result in compilation errors.
type UnsafeRepositoryServiceServer interface {
	mustEmbedUnimplementedRepositoryServiceServer()
}

func RegisterRepositoryServiceServer(s grpc.ServiceRegistrar, srv RepositoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedRepositoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RepositoryService_ServiceDesc, srv)
}

func _RepositoryService_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_Describe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_DescribeMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).DescribeMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_DescribeMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).DescribeMany(ctx, req.(*DescribeManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_GetFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetFiles(ctx, req.(*GetFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetChangedFilePaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangedFilePathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetChangedFilePaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_GetChangedFilePaths_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetChangedFilePaths(ctx, req.(*GetChangedFilePathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSshKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_GetSshKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetSshKey(ctx, req.(*GetSshKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_ListAccessibleRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessibleRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).ListAccessibleRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_ListAccessibleRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).ListAccessibleRepositories(ctx, req.(*ListAccessibleRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_ListCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).ListCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_ListCollaborators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).ListCollaborators(ctx, req.(*ListCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_CreateBuildStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuildStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).CreateBuildStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_CreateBuildStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).CreateBuildStatus(ctx, req.(*CreateBuildStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_CheckDeployKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDeployKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).CheckDeployKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_CheckDeployKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).CheckDeployKey(ctx, req.(*CheckDeployKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_RegenerateDeployKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateDeployKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).RegenerateDeployKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_RegenerateDeployKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).RegenerateDeployKey(ctx, req.(*RegenerateDeployKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_CheckWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).CheckWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_CheckWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).CheckWebhook(ctx, req.(*CheckWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_RegenerateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).RegenerateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_RegenerateWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).RegenerateWebhook(ctx, req.(*RegenerateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_Fork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).Fork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_Fork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).Fork(ctx, req.(*ForkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_DescribeRemoteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRemoteRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).DescribeRemoteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_DescribeRemoteRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).DescribeRemoteRepository(ctx, req.(*DescribeRemoteRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_DescribeRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).DescribeRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_DescribeRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).DescribeRevision(ctx, req.(*DescribeRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_VerifyWebhookSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyWebhookSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).VerifyWebhookSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_VerifyWebhookSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).VerifyWebhookSignature(ctx, req.(*VerifyWebhookSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepositoryService_ServiceDesc is the grpc.ServiceDesc for RepositoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepositoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.Repository.RepositoryService",
	HandlerType: (*RepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _RepositoryService_Describe_Handler,
		},
		{
			MethodName: "DescribeMany",
			Handler:    _RepositoryService_DescribeMany_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RepositoryService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RepositoryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RepositoryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RepositoryService_Delete_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _RepositoryService_GetFile_Handler,
		},
		{
			MethodName: "GetFiles",
			Handler:    _RepositoryService_GetFiles_Handler,
		},
		{
			MethodName: "GetChangedFilePaths",
			Handler:    _RepositoryService_GetChangedFilePaths_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _RepositoryService_Commit_Handler,
		},
		{
			MethodName: "GetSshKey",
			Handler:    _RepositoryService_GetSshKey_Handler,
		},
		{
			MethodName: "ListAccessibleRepositories",
			Handler:    _RepositoryService_ListAccessibleRepositories_Handler,
		},
		{
			MethodName: "ListCollaborators",
			Handler:    _RepositoryService_ListCollaborators_Handler,
		},
		{
			MethodName: "CreateBuildStatus",
			Handler:    _RepositoryService_CreateBuildStatus_Handler,
		},
		{
			MethodName: "CheckDeployKey",
			Handler:    _RepositoryService_CheckDeployKey_Handler,
		},
		{
			MethodName: "RegenerateDeployKey",
			Handler:    _RepositoryService_RegenerateDeployKey_Handler,
		},
		{
			MethodName: "CheckWebhook",
			Handler:    _RepositoryService_CheckWebhook_Handler,
		},
		{
			MethodName: "RegenerateWebhook",
			Handler:    _RepositoryService_RegenerateWebhook_Handler,
		},
		{
			MethodName: "Fork",
			Handler:    _RepositoryService_Fork_Handler,
		},
		{
			MethodName: "DescribeRemoteRepository",
			Handler:    _RepositoryService_DescribeRemoteRepository_Handler,
		},
		{
			MethodName: "DescribeRevision",
			Handler:    _RepositoryService_DescribeRevision_Handler,
		},
		{
			MethodName: "VerifyWebhookSignature",
			Handler:    _RepositoryService_VerifyWebhookSignature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repository.proto",
}
