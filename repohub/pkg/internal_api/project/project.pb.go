// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.20.0
// source: project.proto

package project

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	response_status "github.com/semaphoreio/semaphore/repohub/pkg/internal_api/response_status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListRequest_Order int32

const (
	ListRequest_BY_NAME_ASC          ListRequest_Order = 0
	ListRequest_BY_CREATION_TIME_ASC ListRequest_Order = 1
)

// Enum value maps for ListRequest_Order.
var (
	ListRequest_Order_name = map[int32]string{
		0: "BY_NAME_ASC",
		1: "BY_CREATION_TIME_ASC",
	}
	ListRequest_Order_value = map[string]int32{
		"BY_NAME_ASC":          0,
		"BY_CREATION_TIME_ASC": 1,
	}
)

func (x ListRequest_Order) Enum() *ListRequest_Order {
	p := new(ListRequest_Order)
	*p = x
	return p
}

func (x ListRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_project_proto_enumTypes[0].Descriptor()
}

func (ListRequest_Order) Type() protoreflect.EnumType {
	return &file_project_proto_enumTypes[0]
}

func (x ListRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListRequest_Order.Descriptor instead.
func (ListRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_project_proto_rawDescGZIP(), []int{2, 0}
}

type Project_RunType int32

const (
	Project_BRANCHES             Project_RunType = 0
	Project_TAGS                 Project_RunType = 1
	Project_PULL_REQUESTS        Project_RunType = 2
	Project_FORKED_PULL_REQUESTS Project_RunType = 3
)

// Enum value maps for Project_RunType.
var (
	Project_RunType_name = map[int32]string{
		0: "BRANCHES",
		1: "TAGS",
		2: "PULL_REQUESTS",
		3: "FORKED_PULL_REQUESTS",
	}
	Project_RunType_value = map[string]int32{
		"BRANCHES":             0,
		"TAGS":                 1,
		"PULL_REQUESTS":        2,
		"FORKED_PULL_REQUESTS": 3,
	}
)

func (x Project_RunType) Enum() *Project_RunType {
	p := new(Project_RunType)
	*p = x
	return p
}

func (x Project_RunType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project_RunType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_proto_enumTypes[1].Descriptor()
}

func (Project_RunType) Type() protoreflect.EnumType {
	return &file_project_proto_enumTypes[1]
}

func (x Project_RunType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project_RunType.Descriptor instead.
func (Project_RunType) EnumDescriptor() ([]byte, []int) {
	return file_project_proto_rawDescGZIP(), []int{4, 0}
}

type Project_PermissionType int32

const (
	Project_EMPTY               Project_PermissionType = 0
	Project_DEFAULT_BRANCH      Project_PermissionType = 1
	Project_NON_DEFAULT_BRANCH  Project_PermissionType = 2
	Project_PULL_REQUEST        Project_PermissionType = 3
	Project_FORKED_PULL_REQUEST Project_PermissionType = 4
	Project_TAG                 Project_PermissionType = 5
)

// Enum value maps for Project_PermissionType.
var (
	Project_PermissionType_name = map[int32]string{
		0: "EMPTY",
		1: "DEFAULT_BRANCH",
		2: "NON_DEFAULT_BRANCH",
		3: "PULL_REQUEST",
		4: "FORKED_PULL_REQUEST",
		5: "TAG",
	}
	Project_PermissionType_value = map[string]int32{
		"EMPTY":               0,
		"DEFAULT_BRANCH":      1,
		"NON_DEFAULT_BRANCH":  2,
		"PULL_REQUEST":        3,
		"FORKED_PULL_REQUEST": 4,
		"TAG":                 5,
	}
)

func (x Project_PermissionType) Enum() *Project_PermissionType {
	p := new(Project_PermissionType)
	*p = x
	return p
}

func (x Project_PermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project_PermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_proto_enumTypes[2].Descriptor()
}

func (Project_PermissionType) Type() protoreflect.EnumType {
	return &file_project_proto_enumTypes[2]
}

func (x Project_PermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project_PermissionType.Descriptor instead.
func (Project_PermissionType) EnumDescriptor() ([]byte, []int) {
	return file_project_proto_rawDescGZIP(), []int{4, 1}
}

// Describe call request
//
//   - project_id              = [required] UUID of the project.
//   - include_private_git_key = [optional] request the private ssh key in the response.
//     default: false
type DescribeRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ProjectId            string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	IncludePrivateGitKey bool                   `protobuf:"varint,2,opt,name=include_private_git_key,json=includePrivateGitKey,proto3" json:"include_private_git_key,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DescribeRequest) Reset() {
	*x = DescribeRequest{}
	mi := &file_project_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRequest) ProtoMessage() {}

func (x *DescribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_project_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRequest.ProtoReflect.Descriptor instead.
func (*DescribeRequest) Descriptor() ([]byte, []int) {
	return file_project_proto_rawDescGZIP(), []int{0}
}

func (x *DescribeRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DescribeRequest) GetIncludePrivateGitKey() bool {
	if x != nil {
		return x.IncludePrivateGitKey
	}
	return false
}

// Describe call response
//
// Response:
// - response_status  = [required] Status of the reponse.
// - project          = [required if response status OK]
type DescribeResponse struct {
	state          protoimpl.MessageState          `protogen:"open.v1"`
	ResponseStatus *response_status.ResponseStatus `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	Project        *Project                        `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DescribeResponse) Reset() {
	*x = DescribeResponse{}
	mi := &file_project_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeResponse) ProtoMessage() {}

func (x *DescribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_project_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeResponse.ProtoReflect.Descriptor instead.
func (*DescribeResponse) Descriptor() ([]byte, []int) {
	return file_project_proto_rawDescGZIP(), []int{1}
}

func (x *DescribeResponse) GetResponseStatus() *response_status.ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *DescribeResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

// List call request
//
// - org_id = [optional] If present, the response will include projects form organization.
// - created_at_gt = [optional] If present, the response will include projects created at after the timestamp
// - order = [required] Sorting order direction
// - page_size = [required] Number of orgs in one response
// - page_token = [required] Token for the page
type ListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgId         string                 `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CreatedAtGt   *timestamp.Timestamp   `protobuf:"bytes,3,opt,name=created_at_gt,json=createdAtGt,proto3" json:"created_at_gt,omitempty"`
	Order         ListRequest_Order      `protobuf:"varint,4,opt,name=order,proto3,enum=InternalApi.Project.ListRequest_Order" json:"order,omitempty"`
	PageSize      int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_project_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_project_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_project_proto_rawDescGZIP(), []int{2}
}

func (x *ListRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListRequest) GetCreatedAtGt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAtGt
	}
	return nil
}

func (x *ListRequest) GetOrder() ListRequest_Order {
	if x != nil {
		return x.Order
	}
	return ListRequest_BY_NAME_ASC
}

func (x *ListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List call response
//
// Response:
// - response_status  = [required] Status of the reponse.
// - projects         = [required if response status OK] Projects
// - next_page_token  = [required if response status OK] Token for the next page.
type ListResponse struct {
	state          protoimpl.MessageState          `protogen:"open.v1"`
	ResponseStatus *response_status.ResponseStatus `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	Projects       []*Project                      `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty"`
	NextPageToken  string                          `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	mi := &file_project_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_project_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_project_proto_rawDescGZIP(), []int{3}
}

func (x *ListResponse) GetResponseStatus() *response_status.ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *ListResponse) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *ListResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

//   - id                   = [required] Project UUID.
//   - name                 = [required] Name of the project.
//   - slug                 = [required] Slug of the project.
//   - private              = [required, deprecated] True if the project if private, false othwrwise
//   - public               = [required] True if the project if public, false othwrwise
//   - owner_id             = [required] Owner UUID [uniquely identifies the owner]
//   - creator_id           = [required] Creator ID - id of the user who created this project
//   - cache_id             = [required] ID of project's cache on Cachehub.
//   - private_git_key      = [required if include_private_git_key=true in the request]
//     The private SSH key for checkout out the repository.
//   - git_url              = [required] The URL to the git repository.
//   - artifact_store_id    = [required] ID of project's artifact store on Artifacthub.
//   - docker_registry_id   = [optional] If project has Docker registry, response includes ID of this registry on Registryhub.
//   - org_id               = [required] ID of organization to witch this projects belongs.
//   - created_at           = [required] date of creation of project
//   - run_on               = [required] List of events from repo provider on witch this project is triggered
//   - forked_pull_requests = [required] Setting related to Pull Requests from forked repositories
//   - repository_id        = [required] Repository ID - id of the repository that is connected to the project
//   - custom_permissions   = [required if restricted organization] True if project do not follow organization defaults for debug/attach permissions.
//   - debug_permissions    = [required if restricted organization] List of types for witch debug sessions are allowed. Used only if custom_permissions is set to true.
//   - attach_permissions   = [required if restricted organization] List of types for witch attached sessions are allowed. Used only if custom_permissions is set to true.
type Project struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	Id                 string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Slug               string                      `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	Private            bool                        `protobuf:"varint,5,opt,name=private,proto3" json:"private,omitempty"`
	OwnerId            string                      `protobuf:"bytes,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CacheId            string                      `protobuf:"bytes,7,opt,name=cache_id,json=cacheId,proto3" json:"cache_id,omitempty"`
	PrivateGitKey      string                      `protobuf:"bytes,8,opt,name=private_git_key,json=privateGitKey,proto3" json:"private_git_key,omitempty"`
	GitUrl             string                      `protobuf:"bytes,9,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
	ArtifactStoreId    string                      `protobuf:"bytes,10,opt,name=artifact_store_id,json=artifactStoreId,proto3" json:"artifact_store_id,omitempty"`
	OrgId              string                      `protobuf:"bytes,11,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CreatedAt          *timestamp.Timestamp        `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	RunOn              []Project_RunType           `protobuf:"varint,13,rep,packed,name=run_on,json=runOn,proto3,enum=InternalApi.Project.Project_RunType" json:"run_on,omitempty"`
	ForkedPullRequests *Project_ForkedPullRequests `protobuf:"bytes,14,opt,name=forked_pull_requests,json=forkedPullRequests,proto3" json:"forked_pull_requests,omitempty"`
	Public             bool                        `protobuf:"varint,15,opt,name=public,proto3" json:"public,omitempty"`
	DockerRegistryId   string                      `protobuf:"bytes,16,opt,name=docker_registry_id,json=dockerRegistryId,proto3" json:"docker_registry_id,omitempty"`
	CreatorId          string                      `protobuf:"bytes,17,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	RepositoryId       string                      `protobuf:"bytes,18,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CustomPermissions  bool                        `protobuf:"varint,21,opt,name=custom_permissions,json=customPermissions,proto3" json:"custom_permissions,omitempty"`
	DebugPermissions   []Project_PermissionType    `protobuf:"varint,19,rep,packed,name=debug_permissions,json=debugPermissions,proto3,enum=InternalApi.Project.Project_PermissionType" json:"debug_permissions,omitempty"`
	AttachPermissions  []Project_PermissionType    `protobuf:"varint,20,rep,packed,name=attach_permissions,json=attachPermissions,proto3,enum=InternalApi.Project.Project_PermissionType" json:"attach_permissions,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Project) Reset() {
	*x = Project{}
	mi := &file_project_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_project_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_project_proto_rawDescGZIP(), []int{4}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Project) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *Project) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Project) GetCacheId() string {
	if x != nil {
		return x.CacheId
	}
	return ""
}

func (x *Project) GetPrivateGitKey() string {
	if x != nil {
		return x.PrivateGitKey
	}
	return ""
}

func (x *Project) GetGitUrl() string {
	if x != nil {
		return x.GitUrl
	}
	return ""
}

func (x *Project) GetArtifactStoreId() string {
	if x != nil {
		return x.ArtifactStoreId
	}
	return ""
}

func (x *Project) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Project) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Project) GetRunOn() []Project_RunType {
	if x != nil {
		return x.RunOn
	}
	return nil
}

func (x *Project) GetForkedPullRequests() *Project_ForkedPullRequests {
	if x != nil {
		return x.ForkedPullRequests
	}
	return nil
}

func (x *Project) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *Project) GetDockerRegistryId() string {
	if x != nil {
		return x.DockerRegistryId
	}
	return ""
}

func (x *Project) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *Project) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *Project) GetCustomPermissions() bool {
	if x != nil {
		return x.CustomPermissions
	}
	return false
}

func (x *Project) GetDebugPermissions() []Project_PermissionType {
	if x != nil {
		return x.DebugPermissions
	}
	return nil
}

func (x *Project) GetAttachPermissions() []Project_PermissionType {
	if x != nil {
		return x.AttachPermissions
	}
	return nil
}

// ForkedPullRequests
//
// # Contains options regarding forked Pull Requests
//
// - allowed_secrets      = [optional, default = []] list of secrets that can be exported. Empty list means that no secret will be exported.
// - allowed_contributors = [optional, default = []] list of contributors that can create workflows from forked PRs. Empty list means that everyone can.
type Project_ForkedPullRequests struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AllowedSecrets      []string               `protobuf:"bytes,1,rep,name=allowed_secrets,json=allowedSecrets,proto3" json:"allowed_secrets,omitempty"`
	AllowedContributors []string               `protobuf:"bytes,2,rep,name=allowed_contributors,json=allowedContributors,proto3" json:"allowed_contributors,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Project_ForkedPullRequests) Reset() {
	*x = Project_ForkedPullRequests{}
	mi := &file_project_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project_ForkedPullRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project_ForkedPullRequests) ProtoMessage() {}

func (x *Project_ForkedPullRequests) ProtoReflect() protoreflect.Message {
	mi := &file_project_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project_ForkedPullRequests.ProtoReflect.Descriptor instead.
func (*Project_ForkedPullRequests) Descriptor() ([]byte, []int) {
	return file_project_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Project_ForkedPullRequests) GetAllowedSecrets() []string {
	if x != nil {
		return x.AllowedSecrets
	}
	return nil
}

func (x *Project_ForkedPullRequests) GetAllowedContributors() []string {
	if x != nil {
		return x.AllowedContributors
	}
	return nil
}

var File_project_proto protoreflect.FileDescriptor

var file_project_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x0f, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x67,
	0x69, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x4b,
	0x65, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x67, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x47, 0x74, 0x12, 0x3c, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x32, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x0f, 0x0a, 0x0b, 0x42, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x9e, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x67, 0x69, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x69, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x4f, 0x6e, 0x12, 0x61, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x75,
	0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x46, 0x6f, 0x72, 0x6b, 0x65, 0x64, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x6b, 0x65, 0x64, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x58, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x64, 0x65, 0x62, 0x75, 0x67, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x70, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x6b, 0x65, 0x64, 0x50,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x4e, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x53, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x47, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x55,
	0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x46, 0x4f, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0x03, 0x22, 0x7b, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50,
	0x54, 0x59, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x4f, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x55, 0x4c,
	0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x41, 0x47, 0x10, 0x05, 0x32, 0xb6, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x24, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x68, 0x75, 0x62,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_project_proto_rawDescOnce sync.Once
	file_project_proto_rawDescData []byte
)

func file_project_proto_rawDescGZIP() []byte {
	file_project_proto_rawDescOnce.Do(func() {
		file_project_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_proto_rawDesc), len(file_project_proto_rawDesc)))
	})
	return file_project_proto_rawDescData
}

var file_project_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_project_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_project_proto_goTypes = []any{
	(ListRequest_Order)(0),                 // 0: InternalApi.Project.ListRequest.Order
	(Project_RunType)(0),                   // 1: InternalApi.Project.Project.RunType
	(Project_PermissionType)(0),            // 2: InternalApi.Project.Project.PermissionType
	(*DescribeRequest)(nil),                // 3: InternalApi.Project.DescribeRequest
	(*DescribeResponse)(nil),               // 4: InternalApi.Project.DescribeResponse
	(*ListRequest)(nil),                    // 5: InternalApi.Project.ListRequest
	(*ListResponse)(nil),                   // 6: InternalApi.Project.ListResponse
	(*Project)(nil),                        // 7: InternalApi.Project.Project
	(*Project_ForkedPullRequests)(nil),     // 8: InternalApi.Project.Project.ForkedPullRequests
	(*response_status.ResponseStatus)(nil), // 9: InternalApi.ResponseStatus
	(*timestamp.Timestamp)(nil),            // 10: google.protobuf.Timestamp
}
var file_project_proto_depIdxs = []int32{
	9,  // 0: InternalApi.Project.DescribeResponse.response_status:type_name -> InternalApi.ResponseStatus
	7,  // 1: InternalApi.Project.DescribeResponse.project:type_name -> InternalApi.Project.Project
	10, // 2: InternalApi.Project.ListRequest.created_at_gt:type_name -> google.protobuf.Timestamp
	0,  // 3: InternalApi.Project.ListRequest.order:type_name -> InternalApi.Project.ListRequest.Order
	9,  // 4: InternalApi.Project.ListResponse.response_status:type_name -> InternalApi.ResponseStatus
	7,  // 5: InternalApi.Project.ListResponse.projects:type_name -> InternalApi.Project.Project
	10, // 6: InternalApi.Project.Project.created_at:type_name -> google.protobuf.Timestamp
	1,  // 7: InternalApi.Project.Project.run_on:type_name -> InternalApi.Project.Project.RunType
	8,  // 8: InternalApi.Project.Project.forked_pull_requests:type_name -> InternalApi.Project.Project.ForkedPullRequests
	2,  // 9: InternalApi.Project.Project.debug_permissions:type_name -> InternalApi.Project.Project.PermissionType
	2,  // 10: InternalApi.Project.Project.attach_permissions:type_name -> InternalApi.Project.Project.PermissionType
	3,  // 11: InternalApi.Project.ProjectService.Describe:input_type -> InternalApi.Project.DescribeRequest
	5,  // 12: InternalApi.Project.ProjectService.List:input_type -> InternalApi.Project.ListRequest
	4,  // 13: InternalApi.Project.ProjectService.Describe:output_type -> InternalApi.Project.DescribeResponse
	6,  // 14: InternalApi.Project.ProjectService.List:output_type -> InternalApi.Project.ListResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_project_proto_init() }
func file_project_proto_init() {
	if File_project_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_proto_rawDesc), len(file_project_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_project_proto_goTypes,
		DependencyIndexes: file_project_proto_depIdxs,
		EnumInfos:         file_project_proto_enumTypes,
		MessageInfos:      file_project_proto_msgTypes,
	}.Build()
	File_project_proto = out.File
	file_project_proto_goTypes = nil
	file_project_proto_depIdxs = nil
}
