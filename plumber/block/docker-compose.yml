services:
  app:
    image: ${IMAGE:-block}:${TAG:-latest}
    build:
      context: ..
      cache_from:
        - "${IMAGE:-block}:${IMAGE_TAG:-latest}"
      dockerfile: block/Dockerfile
      target: ${DOCKER_BUILD_TARGET:-dev}
      args:
        - BUILD_ENV=dev
      ssh:
        - default

    environment:
      BLOCK_POSTGRES_DB_SSL: "false"
      BLOCK_POSTGRES_DB_NAME: "ppl_repo"
      BLOCK_POSTGRES_DB_USER: "postgres"
      BLOCK_POSTGRES_DB_PASSWORD: "the-cake-is-a-lie"
      BLOCK_POSTGRES_DB_HOST: "db"
      BLOCK_POSTGRES_DB_POOL_SIZE: "5"
      RABBITMQ_URL: "amqp://rabbitmq:5672"
      INTERNAL_API_URL_TASK: "task_api:50051"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      task_api:
        condition: service_healthy
    tty: true
    volumes:
      - .:/app:delegated

  db:
    image: "postgres:9.6"
    environment:
      POSTGRES_PASSWORD: "the-cake-is-a-lie"
    restart: "on-failure"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.11.18-management
    environment:
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit log_levels [{connection,error}]"
    restart: "on-failure"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 3s
      timeout: 3s
      retries: 5

  task_api:
    build:
      context: ../
      dockerfile: task_api_referent/Dockerfile
      args:
        APP_NAME: task_api_referent
        MIX_ENV: "prod"
      target: runner
    environment:
      GRPC_PORT: "50052"
    ports:
      - 50051:50051
    healthcheck:
      test: ["CMD-SHELL", "grpc_health_probe -addr=:50051"]
      interval: 3s
      timeout: 3s
      retries: 5

  pgweb:
    container_name: pgweb
    image: sosedoff/pgweb:0.14.1
    restart: always
    profiles: ["dev"]
    links:
      - postgres:postgres
    environment:
      DATABASE_URL: "postgres://postgres:postgres@postgres:5432/block_repo?sslmode=disable"
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
