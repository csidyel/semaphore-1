// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.0
// source: superjerry.proto

package superjerry

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Sort_Direction int32

const (
	Sort_ASC  Sort_Direction = 0
	Sort_DESC Sort_Direction = 1
)

// Enum value maps for Sort_Direction.
var (
	Sort_Direction_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	Sort_Direction_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x Sort_Direction) Enum() *Sort_Direction {
	p := new(Sort_Direction)
	*p = x
	return p
}

func (x Sort_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sort_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_superjerry_proto_enumTypes[0].Descriptor()
}

func (Sort_Direction) Type() protoreflect.EnumType {
	return &file_superjerry_proto_enumTypes[0]
}

func (x Sort_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sort_Direction.Descriptor instead.
func (Sort_Direction) EnumDescriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{1, 0}
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{0}
}

func (x *Pagination) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dir  Sort_Direction `protobuf:"varint,1,opt,name=dir,proto3,enum=InternalApi.Superjerry.Sort_Direction" json:"dir,omitempty"`
	Name string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Sort) Reset() {
	*x = Sort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sort) ProtoMessage() {}

func (x *Sort) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sort.ProtoReflect.Descriptor instead.
func (*Sort) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{1}
}

func (x *Sort) GetDir() Sort_Direction {
	if x != nil {
		return x.Dir
	}
	return Sort_ASC
}

func (x *Sort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents a flaky test.
// - project_id                          = The ID of the project.
// - test_id                             = The ID of the test.
// - test_name                           = The name of the test.
// - test_group                          = The group of the test.
// - test_runner                         = The runner of the test.
// - test_file                           = The file of the test.
// - test_suite                          = The suite of the test.
// - pass_rate                           = The pass rate of the test.
// - labels                              = The labels of the test.
// - disruptions_count                   = The disruption count of the test.
// - latest_disruption_at                = The timestamp of the latest disruption.
// - first_disruption_at                 = The timestamp of the first disruption.
// - latest_disruption_hash              = The hash of the latest disruption.
// - latest_disruption_run_id            = The run ID of the latest disruption.
// - resolved                            = Indicates if the test was resolved.
// - scheduled                           = Indicates if the test was scheduled.
// - ticket_url                          = The URL of the ticket related to the test.
// - age                                 = The age of the test.
// - latest_disruption_at               = The timestamps of the disruptions.
// - disruption_history                  = The disruption history.
// - total_count                         = The total count.
type Flaky struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId             string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TestId                string                 `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	TestName              string                 `protobuf:"bytes,3,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	TestGroup             string                 `protobuf:"bytes,4,opt,name=test_group,json=testGroup,proto3" json:"test_group,omitempty"`
	TestRunner            string                 `protobuf:"bytes,5,opt,name=test_runner,json=testRunner,proto3" json:"test_runner,omitempty"`
	TestFile              string                 `protobuf:"bytes,6,opt,name=test_file,json=testFile,proto3" json:"test_file,omitempty"`
	TestSuite             string                 `protobuf:"bytes,7,opt,name=test_suite,json=testSuite,proto3" json:"test_suite,omitempty"`
	PassRate              int32                  `protobuf:"varint,8,opt,name=pass_rate,json=passRate,proto3" json:"pass_rate,omitempty"`
	Labels                []string               `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"`
	DisruptionsCount      int64                  `protobuf:"varint,10,opt,name=disruptions_count,json=disruptionsCount,proto3" json:"disruptions_count,omitempty"`
	LatestDisruptionAt    *timestamp.Timestamp   `protobuf:"bytes,11,opt,name=latest_disruption_at,json=latestDisruptionAt,proto3" json:"latest_disruption_at,omitempty"`
	FirstDisruptionAt     *timestamp.Timestamp   `protobuf:"bytes,12,opt,name=first_disruption_at,json=firstDisruptionAt,proto3" json:"first_disruption_at,omitempty"`
	LatestDisruptionHash  string                 `protobuf:"bytes,13,opt,name=latest_disruption_hash,json=latestDisruptionHash,proto3" json:"latest_disruption_hash,omitempty"`
	LatestDisruptionRunId string                 `protobuf:"bytes,14,opt,name=latest_disruption_run_id,json=latestDisruptionRunId,proto3" json:"latest_disruption_run_id,omitempty"`
	Resolved              bool                   `protobuf:"varint,15,opt,name=resolved,proto3" json:"resolved,omitempty"`
	Scheduled             bool                   `protobuf:"varint,16,opt,name=scheduled,proto3" json:"scheduled,omitempty"`
	TicketUrl             string                 `protobuf:"bytes,17,opt,name=ticket_url,json=ticketUrl,proto3" json:"ticket_url,omitempty"`
	Age                   int64                  `protobuf:"varint,18,opt,name=age,proto3" json:"age,omitempty"`
	DisruptionTimestamps  []*timestamp.Timestamp `protobuf:"bytes,19,rep,name=disruption_timestamps,json=disruptionTimestamps,proto3" json:"disruption_timestamps,omitempty"`
	DisruptionHistory     []*DisruptionRecord    `protobuf:"bytes,20,rep,name=disruption_history,json=disruptionHistory,proto3" json:"disruption_history,omitempty"`
	TotalCount            uint64                 `protobuf:"varint,21,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *Flaky) Reset() {
	*x = Flaky{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flaky) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flaky) ProtoMessage() {}

func (x *Flaky) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flaky.ProtoReflect.Descriptor instead.
func (*Flaky) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{2}
}

func (x *Flaky) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Flaky) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *Flaky) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *Flaky) GetTestGroup() string {
	if x != nil {
		return x.TestGroup
	}
	return ""
}

func (x *Flaky) GetTestRunner() string {
	if x != nil {
		return x.TestRunner
	}
	return ""
}

func (x *Flaky) GetTestFile() string {
	if x != nil {
		return x.TestFile
	}
	return ""
}

func (x *Flaky) GetTestSuite() string {
	if x != nil {
		return x.TestSuite
	}
	return ""
}

func (x *Flaky) GetPassRate() int32 {
	if x != nil {
		return x.PassRate
	}
	return 0
}

func (x *Flaky) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Flaky) GetDisruptionsCount() int64 {
	if x != nil {
		return x.DisruptionsCount
	}
	return 0
}

func (x *Flaky) GetLatestDisruptionAt() *timestamp.Timestamp {
	if x != nil {
		return x.LatestDisruptionAt
	}
	return nil
}

func (x *Flaky) GetFirstDisruptionAt() *timestamp.Timestamp {
	if x != nil {
		return x.FirstDisruptionAt
	}
	return nil
}

func (x *Flaky) GetLatestDisruptionHash() string {
	if x != nil {
		return x.LatestDisruptionHash
	}
	return ""
}

func (x *Flaky) GetLatestDisruptionRunId() string {
	if x != nil {
		return x.LatestDisruptionRunId
	}
	return ""
}

func (x *Flaky) GetResolved() bool {
	if x != nil {
		return x.Resolved
	}
	return false
}

func (x *Flaky) GetScheduled() bool {
	if x != nil {
		return x.Scheduled
	}
	return false
}

func (x *Flaky) GetTicketUrl() string {
	if x != nil {
		return x.TicketUrl
	}
	return ""
}

func (x *Flaky) GetAge() int64 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Flaky) GetDisruptionTimestamps() []*timestamp.Timestamp {
	if x != nil {
		return x.DisruptionTimestamps
	}
	return nil
}

func (x *Flaky) GetDisruptionHistory() []*DisruptionRecord {
	if x != nil {
		return x.DisruptionHistory
	}
	return nil
}

func (x *Flaky) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// Represents a record of disruption.
// - day: The day which the disruption happened.
// - count: The disruption count.
type DisruptionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day   *timestamp.Timestamp `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	Count int64                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DisruptionRecord) Reset() {
	*x = DisruptionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisruptionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisruptionRecord) ProtoMessage() {}

func (x *DisruptionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisruptionRecord.ProtoReflect.Descriptor instead.
func (*DisruptionRecord) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{3}
}

func (x *DisruptionRecord) GetDay() *timestamp.Timestamp {
	if x != nil {
		return x.Day
	}
	return nil
}

func (x *DisruptionRecord) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Represents ListFlakyTestsRequest.
// - org_id       = Contains the organization ID for the request.
// - project_id   = Holds the Project ID for the request.
// - pagination   = Holds pagination information for the request.
// - sort         = Holds the sorting order for the flaky tests list.
// - filters      = Contains the filters to be applied on the flaky tests list.
type ListFlakyTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string      `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId  string      `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Sort       *Sort       `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Filters    string      `protobuf:"bytes,5,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListFlakyTestsRequest) Reset() {
	*x = ListFlakyTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlakyTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlakyTestsRequest) ProtoMessage() {}

func (x *ListFlakyTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlakyTestsRequest.ProtoReflect.Descriptor instead.
func (*ListFlakyTestsRequest) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{4}
}

func (x *ListFlakyTestsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListFlakyTestsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListFlakyTestsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListFlakyTestsRequest) GetSort() *Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListFlakyTestsRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

// Represents ListFlakyTestsResponse.
// - flaky_tests  = Contains the list of flaky tests.
// - pagination   = Holds the Pagination information of the response.
// - total_pages  = Represents the total number of pages in the response.
// - total_rows   = Total number of rows/items in the response.
type ListFlakyTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlakyTests []*Flaky    `protobuf:"bytes,1,rep,name=flaky_tests,json=flakyTests,proto3" json:"flaky_tests,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	TotalPages uint64      `protobuf:"varint,3,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	TotalRows  uint64      `protobuf:"varint,4,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
}

func (x *ListFlakyTestsResponse) Reset() {
	*x = ListFlakyTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlakyTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlakyTestsResponse) ProtoMessage() {}

func (x *ListFlakyTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlakyTestsResponse.ProtoReflect.Descriptor instead.
func (*ListFlakyTestsResponse) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{5}
}

func (x *ListFlakyTestsResponse) GetFlakyTests() []*Flaky {
	if x != nil {
		return x.FlakyTests
	}
	return nil
}

func (x *ListFlakyTestsResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListFlakyTestsResponse) GetTotalPages() uint64 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *ListFlakyTestsResponse) GetTotalRows() uint64 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

// Represents ListDisruptionHistoryRequest.
// - org_id       = Contains the organization ID the request is for.
// - project_id   = Holds the Project ID the request is about.
// - filters      = Contains the filters to be applied on the request.
type ListDisruptionHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId     string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Filters   string `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListDisruptionHistoryRequest) Reset() {
	*x = ListDisruptionHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDisruptionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDisruptionHistoryRequest) ProtoMessage() {}

func (x *ListDisruptionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDisruptionHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListDisruptionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{6}
}

func (x *ListDisruptionHistoryRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListDisruptionHistoryRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListDisruptionHistoryRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

// Represents ListDisruptionHistoryResponse.
// - disruptions = Contains the list of Disruption Records.
type ListDisruptionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disruptions []*DisruptionRecord `protobuf:"bytes,1,rep,name=disruptions,proto3" json:"disruptions,omitempty"`
}

func (x *ListDisruptionHistoryResponse) Reset() {
	*x = ListDisruptionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDisruptionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDisruptionHistoryResponse) ProtoMessage() {}

func (x *ListDisruptionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDisruptionHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListDisruptionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{7}
}

func (x *ListDisruptionHistoryResponse) GetDisruptions() []*DisruptionRecord {
	if x != nil {
		return x.Disruptions
	}
	return nil
}

// Represents ListFlakyHistoryRequest.
// - org_id       = Contains the organization ID the request is for.
// - project_id   = Holds the Project ID the request is about.
// - filters      = Contains the filters to be applied on the request.
type ListFlakyHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId     string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Filters   string `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListFlakyHistoryRequest) Reset() {
	*x = ListFlakyHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlakyHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlakyHistoryRequest) ProtoMessage() {}

func (x *ListFlakyHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlakyHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListFlakyHistoryRequest) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{8}
}

func (x *ListFlakyHistoryRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListFlakyHistoryRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListFlakyHistoryRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

// Represents ListFlakyHistoryResponse.
// - disruptions = Contains the list of Disruption Records.
type ListFlakyHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disruptions []*DisruptionRecord `protobuf:"bytes,1,rep,name=disruptions,proto3" json:"disruptions,omitempty"`
}

func (x *ListFlakyHistoryResponse) Reset() {
	*x = ListFlakyHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlakyHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlakyHistoryResponse) ProtoMessage() {}

func (x *ListFlakyHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlakyHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListFlakyHistoryResponse) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{9}
}

func (x *ListFlakyHistoryResponse) GetDisruptions() []*DisruptionRecord {
	if x != nil {
		return x.Disruptions
	}
	return nil
}

// Represents FlakyTestDetailsRequest.
// - org_id       = Contains the organization ID the request is for.
// - project_id   = Holds the Project ID the request is about.
// - test_id      = Represents the Test ID the request is about.
// - filters      = Contains the filters to be applied on the request.
type FlakyTestDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId     string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TestId    string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Filters   string `protobuf:"bytes,4,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *FlakyTestDetailsRequest) Reset() {
	*x = FlakyTestDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlakyTestDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlakyTestDetailsRequest) ProtoMessage() {}

func (x *FlakyTestDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlakyTestDetailsRequest.ProtoReflect.Descriptor instead.
func (*FlakyTestDetailsRequest) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{10}
}

func (x *FlakyTestDetailsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *FlakyTestDetailsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *FlakyTestDetailsRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *FlakyTestDetailsRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

// Defines FlakyTestDetail which represents data related to a flaky test case.
// - project_id            = Contains the project identifier.
// - id                    = The test case identifier.
// - name                  = The name of the test case.
// - group                 = Identifies the group in which the test case falls.
// - runner                = The system or environment that runs the test case.
// - file                  = Filename containing the test case.
// - labels                = Labels for the test case for classification.
// - available_contexts    = List of available context for the test case.
// - selected_context      = The selected context for the test case.
// - disruptions_count     = No. of disruptions count for the test.
// - pass_rates            = List of pass rates for the test case.
// - p95_durations         = The 95th percentile durations for the test case.
// - impacts               = Impact values for the test case.
// - total_counts          = Total counts of run for test case.
// - contexts              = Different contexts in which test case run.
// - hashes                = Different hashes created for test case.
// - disruption_timestamps = Time stamps at which disruptions happened.
// - disruption_history    = History of disruptions for test case.
type FlakyTestDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId            string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id                   string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Group                string                 `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	Runner               string                 `protobuf:"bytes,5,opt,name=runner,proto3" json:"runner,omitempty"`
	File                 string                 `protobuf:"bytes,6,opt,name=file,proto3" json:"file,omitempty"`
	Labels               []string               `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	AvailableContexts    []string               `protobuf:"bytes,8,rep,name=available_contexts,json=availableContexts,proto3" json:"available_contexts,omitempty"`
	SelectedContext      string                 `protobuf:"bytes,9,opt,name=selected_context,json=selectedContext,proto3" json:"selected_context,omitempty"`
	DisruptionsCount     []int64                `protobuf:"varint,10,rep,packed,name=disruptions_count,json=disruptionsCount,proto3" json:"disruptions_count,omitempty"`
	PassRates            []float64              `protobuf:"fixed64,11,rep,packed,name=pass_rates,json=passRates,proto3" json:"pass_rates,omitempty"` // float64 in Go can be represented as double in Protobuf
	P95Durations         []float64              `protobuf:"fixed64,12,rep,packed,name=p95_durations,json=p95Durations,proto3" json:"p95_durations,omitempty"`
	Impacts              []float64              `protobuf:"fixed64,13,rep,packed,name=impacts,proto3" json:"impacts,omitempty"`
	TotalCounts          []int64                `protobuf:"varint,14,rep,packed,name=total_counts,json=totalCounts,proto3" json:"total_counts,omitempty"`
	Contexts             []string               `protobuf:"bytes,15,rep,name=contexts,proto3" json:"contexts,omitempty"`
	Hashes               []string               `protobuf:"bytes,16,rep,name=hashes,proto3" json:"hashes,omitempty"`
	DisruptionTimestamps []*timestamp.Timestamp `protobuf:"bytes,17,rep,name=disruption_timestamps,json=disruptionTimestamps,proto3" json:"disruption_timestamps,omitempty"`
	DisruptionHistory    []*DisruptionRecord    `protobuf:"bytes,18,rep,name=disruption_history,json=disruptionHistory,proto3" json:"disruption_history,omitempty"`
}

func (x *FlakyTestDetail) Reset() {
	*x = FlakyTestDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlakyTestDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlakyTestDetail) ProtoMessage() {}

func (x *FlakyTestDetail) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlakyTestDetail.ProtoReflect.Descriptor instead.
func (*FlakyTestDetail) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{11}
}

func (x *FlakyTestDetail) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *FlakyTestDetail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlakyTestDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlakyTestDetail) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *FlakyTestDetail) GetRunner() string {
	if x != nil {
		return x.Runner
	}
	return ""
}

func (x *FlakyTestDetail) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *FlakyTestDetail) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FlakyTestDetail) GetAvailableContexts() []string {
	if x != nil {
		return x.AvailableContexts
	}
	return nil
}

func (x *FlakyTestDetail) GetSelectedContext() string {
	if x != nil {
		return x.SelectedContext
	}
	return ""
}

func (x *FlakyTestDetail) GetDisruptionsCount() []int64 {
	if x != nil {
		return x.DisruptionsCount
	}
	return nil
}

func (x *FlakyTestDetail) GetPassRates() []float64 {
	if x != nil {
		return x.PassRates
	}
	return nil
}

func (x *FlakyTestDetail) GetP95Durations() []float64 {
	if x != nil {
		return x.P95Durations
	}
	return nil
}

func (x *FlakyTestDetail) GetImpacts() []float64 {
	if x != nil {
		return x.Impacts
	}
	return nil
}

func (x *FlakyTestDetail) GetTotalCounts() []int64 {
	if x != nil {
		return x.TotalCounts
	}
	return nil
}

func (x *FlakyTestDetail) GetContexts() []string {
	if x != nil {
		return x.Contexts
	}
	return nil
}

func (x *FlakyTestDetail) GetHashes() []string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *FlakyTestDetail) GetDisruptionTimestamps() []*timestamp.Timestamp {
	if x != nil {
		return x.DisruptionTimestamps
	}
	return nil
}

func (x *FlakyTestDetail) GetDisruptionHistory() []*DisruptionRecord {
	if x != nil {
		return x.DisruptionHistory
	}
	return nil
}

// Represents FlakyTestDetailsResponse.
// - detail = Contains the detailed information of the Flaky Test.
type FlakyTestDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail *FlakyTestDetail `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *FlakyTestDetailsResponse) Reset() {
	*x = FlakyTestDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlakyTestDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlakyTestDetailsResponse) ProtoMessage() {}

func (x *FlakyTestDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlakyTestDetailsResponse.ProtoReflect.Descriptor instead.
func (*FlakyTestDetailsResponse) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{12}
}

func (x *FlakyTestDetailsResponse) GetDetail() *FlakyTestDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Represents FlakyTestDisruptionsRequest.
// - org_id       = Contains the organization ID the request is for.
// - project_id   = Holds the Project ID the request is about.
// - test_id      = Represents the Test ID the request concerns.
// - filters      = Contains the filters to be applied on the request.
// - pagination   = Holds pagination information for the request.
type FlakyTestDisruptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string      `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId  string      `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TestId     string      `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Filters    string      `protobuf:"bytes,4,opt,name=filters,proto3" json:"filters,omitempty"`
	Pagination *Pagination `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *FlakyTestDisruptionsRequest) Reset() {
	*x = FlakyTestDisruptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlakyTestDisruptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlakyTestDisruptionsRequest) ProtoMessage() {}

func (x *FlakyTestDisruptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlakyTestDisruptionsRequest.ProtoReflect.Descriptor instead.
func (*FlakyTestDisruptionsRequest) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{13}
}

func (x *FlakyTestDisruptionsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *FlakyTestDisruptionsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *FlakyTestDisruptionsRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *FlakyTestDisruptionsRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *FlakyTestDisruptionsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Represents FlakyTestDisruption.
// - context             = Contains the test context.
// - hash                = Contains the test hash value.
// - timestamp           = Represents the test timestamp.
// - run_id              = Holds the Run ID of the test.
// - total_count         = The total count.
type FlakyTestDisruption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context    string               `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Hash       string               `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Timestamp  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RunId      string               `protobuf:"bytes,4,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	TotalCount uint64               `protobuf:"varint,5,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *FlakyTestDisruption) Reset() {
	*x = FlakyTestDisruption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlakyTestDisruption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlakyTestDisruption) ProtoMessage() {}

func (x *FlakyTestDisruption) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlakyTestDisruption.ProtoReflect.Descriptor instead.
func (*FlakyTestDisruption) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{14}
}

func (x *FlakyTestDisruption) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *FlakyTestDisruption) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *FlakyTestDisruption) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *FlakyTestDisruption) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *FlakyTestDisruption) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// Represents FlakyTestDisruptionsResponse.
// - disruptions        = Contains the list of reported flaky test disruptions.
// - pagination         = Holds the Pagination information of the response.
// - total_pages        = Represents the total number of pages in the response.
// - total_rows         = Total number of rows/items in the response.
type FlakyTestDisruptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disruptions []*FlakyTestDisruption `protobuf:"bytes,1,rep,name=disruptions,proto3" json:"disruptions,omitempty"`
	Pagination  *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	TotalPages  uint64                 `protobuf:"varint,3,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	TotalRows   uint64                 `protobuf:"varint,4,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
}

func (x *FlakyTestDisruptionsResponse) Reset() {
	*x = FlakyTestDisruptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlakyTestDisruptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlakyTestDisruptionsResponse) ProtoMessage() {}

func (x *FlakyTestDisruptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlakyTestDisruptionsResponse.ProtoReflect.Descriptor instead.
func (*FlakyTestDisruptionsResponse) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{15}
}

func (x *FlakyTestDisruptionsResponse) GetDisruptions() []*FlakyTestDisruption {
	if x != nil {
		return x.Disruptions
	}
	return nil
}

func (x *FlakyTestDisruptionsResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *FlakyTestDisruptionsResponse) GetTotalPages() uint64 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *FlakyTestDisruptionsResponse) GetTotalRows() uint64 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

// Represents AddLabelRequest.
// - label             = Contains the label to be added.
// - project_id        = Holds the Project ID where the label should be added.
// - test_id           = Represents the Test ID to which the label will be added.
type AddLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label     string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TestId    string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *AddLabelRequest) Reset() {
	*x = AddLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLabelRequest) ProtoMessage() {}

func (x *AddLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLabelRequest.ProtoReflect.Descriptor instead.
func (*AddLabelRequest) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{16}
}

func (x *AddLabelRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AddLabelRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AddLabelRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type AddLabelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddLabelResponse) Reset() {
	*x = AddLabelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLabelResponse) ProtoMessage() {}

func (x *AddLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLabelResponse.ProtoReflect.Descriptor instead.
func (*AddLabelResponse) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{17}
}

// Represents DeleteLabelRequest.
// - label      = Contains the label to be deleted.
// - project_id = Holds the Project ID associated with the label.
// - test_id    = Represents the Test ID associated with the label.
type DeleteLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label     string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TestId    string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *DeleteLabelRequest) Reset() {
	*x = DeleteLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLabelRequest) ProtoMessage() {}

func (x *DeleteLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLabelRequest.ProtoReflect.Descriptor instead.
func (*DeleteLabelRequest) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteLabelRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DeleteLabelRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteLabelRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type DeleteLabelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteLabelResponse) Reset() {
	*x = DeleteLabelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLabelResponse) ProtoMessage() {}

func (x *DeleteLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLabelResponse.ProtoReflect.Descriptor instead.
func (*DeleteLabelResponse) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{19}
}

// Represents ResolveFlakyTestRequest.
// - user_id    = Contains the User ID to resolve the flaky test.
// - project_id = Holds the Project ID associated with the test.
// - test_id    = Represents the Test ID to be resolved.
type ResolveFlakyTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TestId    string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *ResolveFlakyTestRequest) Reset() {
	*x = ResolveFlakyTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveFlakyTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveFlakyTestRequest) ProtoMessage() {}

func (x *ResolveFlakyTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveFlakyTestRequest.ProtoReflect.Descriptor instead.
func (*ResolveFlakyTestRequest) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{20}
}

func (x *ResolveFlakyTestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ResolveFlakyTestRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ResolveFlakyTestRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type ResolveFlakyTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResolveFlakyTestResponse) Reset() {
	*x = ResolveFlakyTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveFlakyTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveFlakyTestResponse) ProtoMessage() {}

func (x *ResolveFlakyTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveFlakyTestResponse.ProtoReflect.Descriptor instead.
func (*ResolveFlakyTestResponse) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{21}
}

// Represents UnresolveFlakyTestRequest.
// - user_id    = Contains the User ID to resolve the flaky test.
// - project_id = Holds the Project ID associated with the test.
// - test_id    = Represents the Test ID to be resolved.
type UnresolveFlakyTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TestId    string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *UnresolveFlakyTestRequest) Reset() {
	*x = UnresolveFlakyTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnresolveFlakyTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnresolveFlakyTestRequest) ProtoMessage() {}

func (x *UnresolveFlakyTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnresolveFlakyTestRequest.ProtoReflect.Descriptor instead.
func (*UnresolveFlakyTestRequest) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{22}
}

func (x *UnresolveFlakyTestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UnresolveFlakyTestRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UnresolveFlakyTestRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type UnresolveFlakyTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnresolveFlakyTestResponse) Reset() {
	*x = UnresolveFlakyTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnresolveFlakyTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnresolveFlakyTestResponse) ProtoMessage() {}

func (x *UnresolveFlakyTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnresolveFlakyTestResponse.ProtoReflect.Descriptor instead.
func (*UnresolveFlakyTestResponse) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{23}
}

// Represents SaveTicketUrlRequest.
// - user_id    = Contains the User ID who is actioning this request.
// - project_id = Holds the Project ID associated with the test.
// - test_id    = Represents the Test ID linked to the ticket.
// - ticket_url = The URL of the ticket to be saved.
type SaveTicketUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TestId    string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	TicketUrl string `protobuf:"bytes,4,opt,name=ticket_url,json=ticketUrl,proto3" json:"ticket_url,omitempty"`
}

func (x *SaveTicketUrlRequest) Reset() {
	*x = SaveTicketUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTicketUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTicketUrlRequest) ProtoMessage() {}

func (x *SaveTicketUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTicketUrlRequest.ProtoReflect.Descriptor instead.
func (*SaveTicketUrlRequest) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{24}
}

func (x *SaveTicketUrlRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SaveTicketUrlRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SaveTicketUrlRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *SaveTicketUrlRequest) GetTicketUrl() string {
	if x != nil {
		return x.TicketUrl
	}
	return ""
}

type SaveTicketUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveTicketUrlResponse) Reset() {
	*x = SaveTicketUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTicketUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTicketUrlResponse) ProtoMessage() {}

func (x *SaveTicketUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTicketUrlResponse.ProtoReflect.Descriptor instead.
func (*SaveTicketUrlResponse) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{25}
}

// Represents InsertTestResultsRequest.
// - org_id       = Contains the Organization ID responsible for uploading the CSV.
// - project_id   = Holds the Project ID associated with the tests.
// - test_results = List of Test Results to be uploaded.
type InsertTestResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId       string        `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId   string        `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TestResults []*TestResult `protobuf:"bytes,3,rep,name=test_results,json=testResults,proto3" json:"test_results,omitempty"`
}

func (x *InsertTestResultsRequest) Reset() {
	*x = InsertTestResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertTestResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertTestResultsRequest) ProtoMessage() {}

func (x *InsertTestResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertTestResultsRequest.ProtoReflect.Descriptor instead.
func (*InsertTestResultsRequest) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{26}
}

func (x *InsertTestResultsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *InsertTestResultsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *InsertTestResultsRequest) GetTestResults() []*TestResult {
	if x != nil {
		return x.TestResults
	}
	return nil
}

type InsertTestResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InsertTestResultsResponse) Reset() {
	*x = InsertTestResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertTestResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertTestResultsResponse) ProtoMessage() {}

func (x *InsertTestResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertTestResultsResponse.ProtoReflect.Descriptor instead.
func (*InsertTestResultsResponse) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{27}
}

// Represents a TestResult.
// - org_id           = Contains the Organization ID associated with the test.
// - project_id       = Holds the Project ID for the test.
// - id               = Represents the unique Test ID.
// - context          = Context or parameters of the test.
// - hash             = A unique hash identifier for the test.
// - run_id           = Unique identifier of the test run.
// - name             = Name of the test.
// - group            = Group or category to which the test belongs.
// - suite            = Test suite that this test is a part of.
// - file             = File where the test resides.
// - framework        = Framework used for the test.
// - duration         = Duration the test took to run, in microseconds.
// - state            = State of the test.
// - run_at           = Timestamp when the test was run.
// - inserted_at      = Timestamp when this test result was inserted into the database.
type TestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId  string               `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id         string               `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Context    string               `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	Hash       string               `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	RunId      string               `protobuf:"bytes,6,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Name       string               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Group      string               `protobuf:"bytes,8,opt,name=group,proto3" json:"group,omitempty"`
	Suite      string               `protobuf:"bytes,9,opt,name=suite,proto3" json:"suite,omitempty"`
	File       string               `protobuf:"bytes,10,opt,name=file,proto3" json:"file,omitempty"`
	Framework  string               `protobuf:"bytes,11,opt,name=framework,proto3" json:"framework,omitempty"`
	Duration   uint64               `protobuf:"varint,12,opt,name=duration,proto3" json:"duration,omitempty"`
	State      string               `protobuf:"bytes,13,opt,name=state,proto3" json:"state,omitempty"`
	RunAt      *timestamp.Timestamp `protobuf:"bytes,14,opt,name=run_at,json=runAt,proto3" json:"run_at,omitempty"`
	InsertedAt *timestamp.Timestamp `protobuf:"bytes,15,opt,name=inserted_at,json=insertedAt,proto3" json:"inserted_at,omitempty"`
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_superjerry_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_superjerry_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_superjerry_proto_rawDescGZIP(), []int{28}
}

func (x *TestResult) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *TestResult) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TestResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestResult) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *TestResult) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *TestResult) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *TestResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestResult) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *TestResult) GetSuite() string {
	if x != nil {
		return x.Suite
	}
	return ""
}

func (x *TestResult) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *TestResult) GetFramework() string {
	if x != nil {
		return x.Framework
	}
	return ""
}

func (x *TestResult) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TestResult) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *TestResult) GetRunAt() *timestamp.Timestamp {
	if x != nil {
		return x.RunAt
	}
	return nil
}

func (x *TestResult) GetInsertedAt() *timestamp.Timestamp {
	if x != nil {
		return x.InsertedAt
	}
	return nil
}

var File_superjerry_proto protoreflect.FileDescriptor

var file_superjerry_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x74, 0x0a, 0x04, 0x53, 0x6f,
	0x72, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x1e, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01,
	0x22, 0xf9, 0x06, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x69, 0x73,
	0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a,
	0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44,
	0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x69, 0x73, 0x72, 0x75,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44,
	0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x37, 0x0a,
	0x18, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x12, 0x4f, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x64, 0x69,
	0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x11, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x10,
	0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x2c, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61,
	0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72,
	0x79, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61,
	0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x46, 0x6c,
	0x61, 0x6b, 0x79, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x42, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x6f, 0x77, 0x73, 0x22, 0x6e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x72, 0x75,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x6b, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x72, 0x75,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72,
	0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x69, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x66, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x72, 0x75,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x94, 0x05, 0x0a, 0x0f, 0x46, 0x6c, 0x61,
	0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10,
	0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x70, 0x61, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x39, 0x35, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x39, 0x35, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x14, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x72,
	0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x11, 0x64, 0x69,
	0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x5b, 0x0a, 0x18, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a,
	0x65, 0x72, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xca, 0x01, 0x0a,
	0x1b, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72,
	0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x46, 0x6c,
	0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xf1, 0x01, 0x0a, 0x1c, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79,
	0x2e, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x5f, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x15,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x6b,
	0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x0a,
	0x19, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x55,
	0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x53, 0x61,
	0x76, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x55,
	0x72, 0x6c, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x18,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x75, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x32, 0x99, 0x0a, 0x0a, 0x0a, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x12,
	0x6f, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x2d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c,
	0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x84, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65,
	0x72, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69,
	0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x6c, 0x61, 0x6b, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a,
	0x65, 0x72, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75,
	0x0a, 0x10, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x2f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x6b,
	0x79, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61,
	0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61,
	0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x08, 0x41, 0x64, 0x64,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x27, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x41,
	0x64, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2a, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x75, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x12, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x78, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72, 0x72, 0x79,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x38, 0x5a, 0x36,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x6a, 0x65, 0x72, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_superjerry_proto_rawDescOnce sync.Once
	file_superjerry_proto_rawDescData = file_superjerry_proto_rawDesc
)

func file_superjerry_proto_rawDescGZIP() []byte {
	file_superjerry_proto_rawDescOnce.Do(func() {
		file_superjerry_proto_rawDescData = protoimpl.X.CompressGZIP(file_superjerry_proto_rawDescData)
	})
	return file_superjerry_proto_rawDescData
}

var file_superjerry_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_superjerry_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_superjerry_proto_goTypes = []interface{}{
	(Sort_Direction)(0),                   // 0: InternalApi.Superjerry.Sort.Direction
	(*Pagination)(nil),                    // 1: InternalApi.Superjerry.Pagination
	(*Sort)(nil),                          // 2: InternalApi.Superjerry.Sort
	(*Flaky)(nil),                         // 3: InternalApi.Superjerry.Flaky
	(*DisruptionRecord)(nil),              // 4: InternalApi.Superjerry.DisruptionRecord
	(*ListFlakyTestsRequest)(nil),         // 5: InternalApi.Superjerry.ListFlakyTestsRequest
	(*ListFlakyTestsResponse)(nil),        // 6: InternalApi.Superjerry.ListFlakyTestsResponse
	(*ListDisruptionHistoryRequest)(nil),  // 7: InternalApi.Superjerry.ListDisruptionHistoryRequest
	(*ListDisruptionHistoryResponse)(nil), // 8: InternalApi.Superjerry.ListDisruptionHistoryResponse
	(*ListFlakyHistoryRequest)(nil),       // 9: InternalApi.Superjerry.ListFlakyHistoryRequest
	(*ListFlakyHistoryResponse)(nil),      // 10: InternalApi.Superjerry.ListFlakyHistoryResponse
	(*FlakyTestDetailsRequest)(nil),       // 11: InternalApi.Superjerry.FlakyTestDetailsRequest
	(*FlakyTestDetail)(nil),               // 12: InternalApi.Superjerry.FlakyTestDetail
	(*FlakyTestDetailsResponse)(nil),      // 13: InternalApi.Superjerry.FlakyTestDetailsResponse
	(*FlakyTestDisruptionsRequest)(nil),   // 14: InternalApi.Superjerry.FlakyTestDisruptionsRequest
	(*FlakyTestDisruption)(nil),           // 15: InternalApi.Superjerry.FlakyTestDisruption
	(*FlakyTestDisruptionsResponse)(nil),  // 16: InternalApi.Superjerry.FlakyTestDisruptionsResponse
	(*AddLabelRequest)(nil),               // 17: InternalApi.Superjerry.AddLabelRequest
	(*AddLabelResponse)(nil),              // 18: InternalApi.Superjerry.AddLabelResponse
	(*DeleteLabelRequest)(nil),            // 19: InternalApi.Superjerry.DeleteLabelRequest
	(*DeleteLabelResponse)(nil),           // 20: InternalApi.Superjerry.DeleteLabelResponse
	(*ResolveFlakyTestRequest)(nil),       // 21: InternalApi.Superjerry.ResolveFlakyTestRequest
	(*ResolveFlakyTestResponse)(nil),      // 22: InternalApi.Superjerry.ResolveFlakyTestResponse
	(*UnresolveFlakyTestRequest)(nil),     // 23: InternalApi.Superjerry.UnresolveFlakyTestRequest
	(*UnresolveFlakyTestResponse)(nil),    // 24: InternalApi.Superjerry.UnresolveFlakyTestResponse
	(*SaveTicketUrlRequest)(nil),          // 25: InternalApi.Superjerry.SaveTicketUrlRequest
	(*SaveTicketUrlResponse)(nil),         // 26: InternalApi.Superjerry.SaveTicketUrlResponse
	(*InsertTestResultsRequest)(nil),      // 27: InternalApi.Superjerry.InsertTestResultsRequest
	(*InsertTestResultsResponse)(nil),     // 28: InternalApi.Superjerry.InsertTestResultsResponse
	(*TestResult)(nil),                    // 29: InternalApi.Superjerry.TestResult
	(*timestamp.Timestamp)(nil),           // 30: google.protobuf.Timestamp
}
var file_superjerry_proto_depIdxs = []int32{
	0,  // 0: InternalApi.Superjerry.Sort.dir:type_name -> InternalApi.Superjerry.Sort.Direction
	30, // 1: InternalApi.Superjerry.Flaky.latest_disruption_at:type_name -> google.protobuf.Timestamp
	30, // 2: InternalApi.Superjerry.Flaky.first_disruption_at:type_name -> google.protobuf.Timestamp
	30, // 3: InternalApi.Superjerry.Flaky.disruption_timestamps:type_name -> google.protobuf.Timestamp
	4,  // 4: InternalApi.Superjerry.Flaky.disruption_history:type_name -> InternalApi.Superjerry.DisruptionRecord
	30, // 5: InternalApi.Superjerry.DisruptionRecord.day:type_name -> google.protobuf.Timestamp
	1,  // 6: InternalApi.Superjerry.ListFlakyTestsRequest.pagination:type_name -> InternalApi.Superjerry.Pagination
	2,  // 7: InternalApi.Superjerry.ListFlakyTestsRequest.sort:type_name -> InternalApi.Superjerry.Sort
	3,  // 8: InternalApi.Superjerry.ListFlakyTestsResponse.flaky_tests:type_name -> InternalApi.Superjerry.Flaky
	1,  // 9: InternalApi.Superjerry.ListFlakyTestsResponse.pagination:type_name -> InternalApi.Superjerry.Pagination
	4,  // 10: InternalApi.Superjerry.ListDisruptionHistoryResponse.disruptions:type_name -> InternalApi.Superjerry.DisruptionRecord
	4,  // 11: InternalApi.Superjerry.ListFlakyHistoryResponse.disruptions:type_name -> InternalApi.Superjerry.DisruptionRecord
	30, // 12: InternalApi.Superjerry.FlakyTestDetail.disruption_timestamps:type_name -> google.protobuf.Timestamp
	4,  // 13: InternalApi.Superjerry.FlakyTestDetail.disruption_history:type_name -> InternalApi.Superjerry.DisruptionRecord
	12, // 14: InternalApi.Superjerry.FlakyTestDetailsResponse.detail:type_name -> InternalApi.Superjerry.FlakyTestDetail
	1,  // 15: InternalApi.Superjerry.FlakyTestDisruptionsRequest.pagination:type_name -> InternalApi.Superjerry.Pagination
	30, // 16: InternalApi.Superjerry.FlakyTestDisruption.timestamp:type_name -> google.protobuf.Timestamp
	15, // 17: InternalApi.Superjerry.FlakyTestDisruptionsResponse.disruptions:type_name -> InternalApi.Superjerry.FlakyTestDisruption
	1,  // 18: InternalApi.Superjerry.FlakyTestDisruptionsResponse.pagination:type_name -> InternalApi.Superjerry.Pagination
	29, // 19: InternalApi.Superjerry.InsertTestResultsRequest.test_results:type_name -> InternalApi.Superjerry.TestResult
	30, // 20: InternalApi.Superjerry.TestResult.run_at:type_name -> google.protobuf.Timestamp
	30, // 21: InternalApi.Superjerry.TestResult.inserted_at:type_name -> google.protobuf.Timestamp
	5,  // 22: InternalApi.Superjerry.Superjerry.ListFlakyTests:input_type -> InternalApi.Superjerry.ListFlakyTestsRequest
	7,  // 23: InternalApi.Superjerry.Superjerry.ListDisruptionHistory:input_type -> InternalApi.Superjerry.ListDisruptionHistoryRequest
	9,  // 24: InternalApi.Superjerry.Superjerry.ListFlakyHistory:input_type -> InternalApi.Superjerry.ListFlakyHistoryRequest
	11, // 25: InternalApi.Superjerry.Superjerry.FlakyTestDetails:input_type -> InternalApi.Superjerry.FlakyTestDetailsRequest
	14, // 26: InternalApi.Superjerry.Superjerry.FlakyTestDisruptions:input_type -> InternalApi.Superjerry.FlakyTestDisruptionsRequest
	17, // 27: InternalApi.Superjerry.Superjerry.AddLabel:input_type -> InternalApi.Superjerry.AddLabelRequest
	19, // 28: InternalApi.Superjerry.Superjerry.DeleteLabel:input_type -> InternalApi.Superjerry.DeleteLabelRequest
	21, // 29: InternalApi.Superjerry.Superjerry.ResolveFlakyTest:input_type -> InternalApi.Superjerry.ResolveFlakyTestRequest
	23, // 30: InternalApi.Superjerry.Superjerry.UnresolveFlakyTest:input_type -> InternalApi.Superjerry.UnresolveFlakyTestRequest
	25, // 31: InternalApi.Superjerry.Superjerry.SaveTicketUrl:input_type -> InternalApi.Superjerry.SaveTicketUrlRequest
	27, // 32: InternalApi.Superjerry.Superjerry.InsertTestResults:input_type -> InternalApi.Superjerry.InsertTestResultsRequest
	6,  // 33: InternalApi.Superjerry.Superjerry.ListFlakyTests:output_type -> InternalApi.Superjerry.ListFlakyTestsResponse
	8,  // 34: InternalApi.Superjerry.Superjerry.ListDisruptionHistory:output_type -> InternalApi.Superjerry.ListDisruptionHistoryResponse
	10, // 35: InternalApi.Superjerry.Superjerry.ListFlakyHistory:output_type -> InternalApi.Superjerry.ListFlakyHistoryResponse
	13, // 36: InternalApi.Superjerry.Superjerry.FlakyTestDetails:output_type -> InternalApi.Superjerry.FlakyTestDetailsResponse
	16, // 37: InternalApi.Superjerry.Superjerry.FlakyTestDisruptions:output_type -> InternalApi.Superjerry.FlakyTestDisruptionsResponse
	18, // 38: InternalApi.Superjerry.Superjerry.AddLabel:output_type -> InternalApi.Superjerry.AddLabelResponse
	20, // 39: InternalApi.Superjerry.Superjerry.DeleteLabel:output_type -> InternalApi.Superjerry.DeleteLabelResponse
	22, // 40: InternalApi.Superjerry.Superjerry.ResolveFlakyTest:output_type -> InternalApi.Superjerry.ResolveFlakyTestResponse
	24, // 41: InternalApi.Superjerry.Superjerry.UnresolveFlakyTest:output_type -> InternalApi.Superjerry.UnresolveFlakyTestResponse
	26, // 42: InternalApi.Superjerry.Superjerry.SaveTicketUrl:output_type -> InternalApi.Superjerry.SaveTicketUrlResponse
	28, // 43: InternalApi.Superjerry.Superjerry.InsertTestResults:output_type -> InternalApi.Superjerry.InsertTestResultsResponse
	33, // [33:44] is the sub-list for method output_type
	22, // [22:33] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_superjerry_proto_init() }
func file_superjerry_proto_init() {
	if File_superjerry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_superjerry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flaky); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisruptionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlakyTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlakyTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDisruptionHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDisruptionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlakyHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlakyHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlakyTestDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlakyTestDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlakyTestDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlakyTestDisruptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlakyTestDisruption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlakyTestDisruptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLabelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLabelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveFlakyTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveFlakyTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnresolveFlakyTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnresolveFlakyTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTicketUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTicketUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertTestResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertTestResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_superjerry_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_superjerry_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_superjerry_proto_goTypes,
		DependencyIndexes: file_superjerry_proto_depIdxs,
		EnumInfos:         file_superjerry_proto_enumTypes,
		MessageInfos:      file_superjerry_proto_msgTypes,
	}.Build()
	File_superjerry_proto = out.File
	file_superjerry_proto_rawDesc = nil
	file_superjerry_proto_goTypes = nil
	file_superjerry_proto_depIdxs = nil
}
