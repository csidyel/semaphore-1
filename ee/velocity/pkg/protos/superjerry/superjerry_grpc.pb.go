// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.0
// source: superjerry.proto

package superjerry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Superjerry_ListFlakyTests_FullMethodName        = "/InternalApi.Superjerry.Superjerry/ListFlakyTests"
	Superjerry_ListDisruptionHistory_FullMethodName = "/InternalApi.Superjerry.Superjerry/ListDisruptionHistory"
	Superjerry_ListFlakyHistory_FullMethodName      = "/InternalApi.Superjerry.Superjerry/ListFlakyHistory"
	Superjerry_FlakyTestDetails_FullMethodName      = "/InternalApi.Superjerry.Superjerry/FlakyTestDetails"
	Superjerry_FlakyTestDisruptions_FullMethodName  = "/InternalApi.Superjerry.Superjerry/FlakyTestDisruptions"
	Superjerry_AddLabel_FullMethodName              = "/InternalApi.Superjerry.Superjerry/AddLabel"
	Superjerry_DeleteLabel_FullMethodName           = "/InternalApi.Superjerry.Superjerry/DeleteLabel"
	Superjerry_ResolveFlakyTest_FullMethodName      = "/InternalApi.Superjerry.Superjerry/ResolveFlakyTest"
	Superjerry_UnresolveFlakyTest_FullMethodName    = "/InternalApi.Superjerry.Superjerry/UnresolveFlakyTest"
	Superjerry_SaveTicketUrl_FullMethodName         = "/InternalApi.Superjerry.Superjerry/SaveTicketUrl"
	Superjerry_InsertTestResults_FullMethodName     = "/InternalApi.Superjerry.Superjerry/InsertTestResults"
)

// SuperjerryClient is the client API for Superjerry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuperjerryClient interface {
	ListFlakyTests(ctx context.Context, in *ListFlakyTestsRequest, opts ...grpc.CallOption) (*ListFlakyTestsResponse, error)
	ListDisruptionHistory(ctx context.Context, in *ListDisruptionHistoryRequest, opts ...grpc.CallOption) (*ListDisruptionHistoryResponse, error)
	ListFlakyHistory(ctx context.Context, in *ListFlakyHistoryRequest, opts ...grpc.CallOption) (*ListFlakyHistoryResponse, error)
	FlakyTestDetails(ctx context.Context, in *FlakyTestDetailsRequest, opts ...grpc.CallOption) (*FlakyTestDetailsResponse, error)
	FlakyTestDisruptions(ctx context.Context, in *FlakyTestDisruptionsRequest, opts ...grpc.CallOption) (*FlakyTestDisruptionsResponse, error)
	AddLabel(ctx context.Context, in *AddLabelRequest, opts ...grpc.CallOption) (*AddLabelResponse, error)
	DeleteLabel(ctx context.Context, in *DeleteLabelRequest, opts ...grpc.CallOption) (*DeleteLabelResponse, error)
	ResolveFlakyTest(ctx context.Context, in *ResolveFlakyTestRequest, opts ...grpc.CallOption) (*ResolveFlakyTestResponse, error)
	UnresolveFlakyTest(ctx context.Context, in *UnresolveFlakyTestRequest, opts ...grpc.CallOption) (*UnresolveFlakyTestResponse, error)
	SaveTicketUrl(ctx context.Context, in *SaveTicketUrlRequest, opts ...grpc.CallOption) (*SaveTicketUrlResponse, error)
	InsertTestResults(ctx context.Context, in *InsertTestResultsRequest, opts ...grpc.CallOption) (*InsertTestResultsResponse, error)
}

type superjerryClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperjerryClient(cc grpc.ClientConnInterface) SuperjerryClient {
	return &superjerryClient{cc}
}

func (c *superjerryClient) ListFlakyTests(ctx context.Context, in *ListFlakyTestsRequest, opts ...grpc.CallOption) (*ListFlakyTestsResponse, error) {
	out := new(ListFlakyTestsResponse)
	err := c.cc.Invoke(ctx, Superjerry_ListFlakyTests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superjerryClient) ListDisruptionHistory(ctx context.Context, in *ListDisruptionHistoryRequest, opts ...grpc.CallOption) (*ListDisruptionHistoryResponse, error) {
	out := new(ListDisruptionHistoryResponse)
	err := c.cc.Invoke(ctx, Superjerry_ListDisruptionHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superjerryClient) ListFlakyHistory(ctx context.Context, in *ListFlakyHistoryRequest, opts ...grpc.CallOption) (*ListFlakyHistoryResponse, error) {
	out := new(ListFlakyHistoryResponse)
	err := c.cc.Invoke(ctx, Superjerry_ListFlakyHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superjerryClient) FlakyTestDetails(ctx context.Context, in *FlakyTestDetailsRequest, opts ...grpc.CallOption) (*FlakyTestDetailsResponse, error) {
	out := new(FlakyTestDetailsResponse)
	err := c.cc.Invoke(ctx, Superjerry_FlakyTestDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superjerryClient) FlakyTestDisruptions(ctx context.Context, in *FlakyTestDisruptionsRequest, opts ...grpc.CallOption) (*FlakyTestDisruptionsResponse, error) {
	out := new(FlakyTestDisruptionsResponse)
	err := c.cc.Invoke(ctx, Superjerry_FlakyTestDisruptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superjerryClient) AddLabel(ctx context.Context, in *AddLabelRequest, opts ...grpc.CallOption) (*AddLabelResponse, error) {
	out := new(AddLabelResponse)
	err := c.cc.Invoke(ctx, Superjerry_AddLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superjerryClient) DeleteLabel(ctx context.Context, in *DeleteLabelRequest, opts ...grpc.CallOption) (*DeleteLabelResponse, error) {
	out := new(DeleteLabelResponse)
	err := c.cc.Invoke(ctx, Superjerry_DeleteLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superjerryClient) ResolveFlakyTest(ctx context.Context, in *ResolveFlakyTestRequest, opts ...grpc.CallOption) (*ResolveFlakyTestResponse, error) {
	out := new(ResolveFlakyTestResponse)
	err := c.cc.Invoke(ctx, Superjerry_ResolveFlakyTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superjerryClient) UnresolveFlakyTest(ctx context.Context, in *UnresolveFlakyTestRequest, opts ...grpc.CallOption) (*UnresolveFlakyTestResponse, error) {
	out := new(UnresolveFlakyTestResponse)
	err := c.cc.Invoke(ctx, Superjerry_UnresolveFlakyTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superjerryClient) SaveTicketUrl(ctx context.Context, in *SaveTicketUrlRequest, opts ...grpc.CallOption) (*SaveTicketUrlResponse, error) {
	out := new(SaveTicketUrlResponse)
	err := c.cc.Invoke(ctx, Superjerry_SaveTicketUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superjerryClient) InsertTestResults(ctx context.Context, in *InsertTestResultsRequest, opts ...grpc.CallOption) (*InsertTestResultsResponse, error) {
	out := new(InsertTestResultsResponse)
	err := c.cc.Invoke(ctx, Superjerry_InsertTestResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperjerryServer is the server API for Superjerry service.
// All implementations should embed UnimplementedSuperjerryServer
// for forward compatibility
type SuperjerryServer interface {
	ListFlakyTests(context.Context, *ListFlakyTestsRequest) (*ListFlakyTestsResponse, error)
	ListDisruptionHistory(context.Context, *ListDisruptionHistoryRequest) (*ListDisruptionHistoryResponse, error)
	ListFlakyHistory(context.Context, *ListFlakyHistoryRequest) (*ListFlakyHistoryResponse, error)
	FlakyTestDetails(context.Context, *FlakyTestDetailsRequest) (*FlakyTestDetailsResponse, error)
	FlakyTestDisruptions(context.Context, *FlakyTestDisruptionsRequest) (*FlakyTestDisruptionsResponse, error)
	AddLabel(context.Context, *AddLabelRequest) (*AddLabelResponse, error)
	DeleteLabel(context.Context, *DeleteLabelRequest) (*DeleteLabelResponse, error)
	ResolveFlakyTest(context.Context, *ResolveFlakyTestRequest) (*ResolveFlakyTestResponse, error)
	UnresolveFlakyTest(context.Context, *UnresolveFlakyTestRequest) (*UnresolveFlakyTestResponse, error)
	SaveTicketUrl(context.Context, *SaveTicketUrlRequest) (*SaveTicketUrlResponse, error)
	InsertTestResults(context.Context, *InsertTestResultsRequest) (*InsertTestResultsResponse, error)
}

// UnimplementedSuperjerryServer should be embedded to have forward compatible implementations.
type UnimplementedSuperjerryServer struct {
}

func (UnimplementedSuperjerryServer) ListFlakyTests(context.Context, *ListFlakyTestsRequest) (*ListFlakyTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlakyTests not implemented")
}
func (UnimplementedSuperjerryServer) ListDisruptionHistory(context.Context, *ListDisruptionHistoryRequest) (*ListDisruptionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDisruptionHistory not implemented")
}
func (UnimplementedSuperjerryServer) ListFlakyHistory(context.Context, *ListFlakyHistoryRequest) (*ListFlakyHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlakyHistory not implemented")
}
func (UnimplementedSuperjerryServer) FlakyTestDetails(context.Context, *FlakyTestDetailsRequest) (*FlakyTestDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlakyTestDetails not implemented")
}
func (UnimplementedSuperjerryServer) FlakyTestDisruptions(context.Context, *FlakyTestDisruptionsRequest) (*FlakyTestDisruptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlakyTestDisruptions not implemented")
}
func (UnimplementedSuperjerryServer) AddLabel(context.Context, *AddLabelRequest) (*AddLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabel not implemented")
}
func (UnimplementedSuperjerryServer) DeleteLabel(context.Context, *DeleteLabelRequest) (*DeleteLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabel not implemented")
}
func (UnimplementedSuperjerryServer) ResolveFlakyTest(context.Context, *ResolveFlakyTestRequest) (*ResolveFlakyTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveFlakyTest not implemented")
}
func (UnimplementedSuperjerryServer) UnresolveFlakyTest(context.Context, *UnresolveFlakyTestRequest) (*UnresolveFlakyTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnresolveFlakyTest not implemented")
}
func (UnimplementedSuperjerryServer) SaveTicketUrl(context.Context, *SaveTicketUrlRequest) (*SaveTicketUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTicketUrl not implemented")
}
func (UnimplementedSuperjerryServer) InsertTestResults(context.Context, *InsertTestResultsRequest) (*InsertTestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTestResults not implemented")
}

// UnsafeSuperjerryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperjerryServer will
// result in compilation errors.
type UnsafeSuperjerryServer interface {
	mustEmbedUnimplementedSuperjerryServer()
}

func RegisterSuperjerryServer(s grpc.ServiceRegistrar, srv SuperjerryServer) {
	s.RegisterService(&Superjerry_ServiceDesc, srv)
}

func _Superjerry_ListFlakyTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlakyTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperjerryServer).ListFlakyTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superjerry_ListFlakyTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperjerryServer).ListFlakyTests(ctx, req.(*ListFlakyTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superjerry_ListDisruptionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDisruptionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperjerryServer).ListDisruptionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superjerry_ListDisruptionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperjerryServer).ListDisruptionHistory(ctx, req.(*ListDisruptionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superjerry_ListFlakyHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlakyHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperjerryServer).ListFlakyHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superjerry_ListFlakyHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperjerryServer).ListFlakyHistory(ctx, req.(*ListFlakyHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superjerry_FlakyTestDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlakyTestDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperjerryServer).FlakyTestDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superjerry_FlakyTestDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperjerryServer).FlakyTestDetails(ctx, req.(*FlakyTestDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superjerry_FlakyTestDisruptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlakyTestDisruptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperjerryServer).FlakyTestDisruptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superjerry_FlakyTestDisruptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperjerryServer).FlakyTestDisruptions(ctx, req.(*FlakyTestDisruptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superjerry_AddLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperjerryServer).AddLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superjerry_AddLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperjerryServer).AddLabel(ctx, req.(*AddLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superjerry_DeleteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperjerryServer).DeleteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superjerry_DeleteLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperjerryServer).DeleteLabel(ctx, req.(*DeleteLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superjerry_ResolveFlakyTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveFlakyTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperjerryServer).ResolveFlakyTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superjerry_ResolveFlakyTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperjerryServer).ResolveFlakyTest(ctx, req.(*ResolveFlakyTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superjerry_UnresolveFlakyTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnresolveFlakyTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperjerryServer).UnresolveFlakyTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superjerry_UnresolveFlakyTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperjerryServer).UnresolveFlakyTest(ctx, req.(*UnresolveFlakyTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superjerry_SaveTicketUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTicketUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperjerryServer).SaveTicketUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superjerry_SaveTicketUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperjerryServer).SaveTicketUrl(ctx, req.(*SaveTicketUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superjerry_InsertTestResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertTestResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperjerryServer).InsertTestResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superjerry_InsertTestResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperjerryServer).InsertTestResults(ctx, req.(*InsertTestResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Superjerry_ServiceDesc is the grpc.ServiceDesc for Superjerry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Superjerry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.Superjerry.Superjerry",
	HandlerType: (*SuperjerryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFlakyTests",
			Handler:    _Superjerry_ListFlakyTests_Handler,
		},
		{
			MethodName: "ListDisruptionHistory",
			Handler:    _Superjerry_ListDisruptionHistory_Handler,
		},
		{
			MethodName: "ListFlakyHistory",
			Handler:    _Superjerry_ListFlakyHistory_Handler,
		},
		{
			MethodName: "FlakyTestDetails",
			Handler:    _Superjerry_FlakyTestDetails_Handler,
		},
		{
			MethodName: "FlakyTestDisruptions",
			Handler:    _Superjerry_FlakyTestDisruptions_Handler,
		},
		{
			MethodName: "AddLabel",
			Handler:    _Superjerry_AddLabel_Handler,
		},
		{
			MethodName: "DeleteLabel",
			Handler:    _Superjerry_DeleteLabel_Handler,
		},
		{
			MethodName: "ResolveFlakyTest",
			Handler:    _Superjerry_ResolveFlakyTest_Handler,
		},
		{
			MethodName: "UnresolveFlakyTest",
			Handler:    _Superjerry_UnresolveFlakyTest_Handler,
		},
		{
			MethodName: "SaveTicketUrl",
			Handler:    _Superjerry_SaveTicketUrl_Handler,
		},
		{
			MethodName: "InsertTestResults",
			Handler:    _Superjerry_InsertTestResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "superjerry.proto",
}
